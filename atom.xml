<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程霜的Blog</title>
  
  <subtitle>效鹣鹣永远成双</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-01-15T11:59:03.979Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django</title>
    <link href="http://example.com/posts/Django.html"/>
    <id>http://example.com/posts/Django.html</id>
    <published>2025-01-15T11:59:03.000Z</published>
    <updated>2025-01-15T11:59:03.979Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install django<br></code></pre></td></tr></table></figure><p>安装Django </p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://example.com/posts/MySQL.html"/>
    <id>http://example.com/posts/MySQL.html</id>
    <published>2025-01-15T11:59:02.000Z</published>
    <updated>2025-01-15T11:59:02.647Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/1d5d9b27-0a05-4b9b-964e-53f706f09662/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250115/us-west-2/s3/aws4_request&X-Amz-Date=20250115T115843Z&X-Amz-Expires=3600&X-Amz-Signature=354b5e0ca4c84e74d413fe6e98102165a39d6acb1de68d063211ffc31be19c7f&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/d423ee75-452f-48db-a780-e0f977a06e72/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250115/us-west-2/s3/aws4_request&X-Amz-Date=20250115T115843Z&X-Amz-Expires=3600&X-Amz-Signature=ec503ebe66e07f20eb3462056363cc11361787d3ca5f5d260028c15fc8e9054d&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/4f346dca-e2ba-4f24-a9d6-280eba895594/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250115/us-west-2/s3/aws4_request&X-Amz-Date=20250115T115843Z&X-Amz-Expires=3600&X-Amz-Signature=d8ba52d43d8b6620710435ddec8142bd5d2e121c17ef44c1eb310fda2f915604&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/1296c350-ad25-41a6-bee4-62642e31aea6/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250115/us-west-2/s3/aws4_request&X-Amz-Date=20250115T115843Z&X-Amz-Expires=3600&X-Amz-Signature=b4b6e27c985d058493718e7e7a0fe197c894e8b39767df9e7467ad3baccddce2&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p>如果不存在则创建</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/27bb7709-2179-4eea-981a-108c24e587f2/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250115/us-west-2/s3/aws4_request&X-Amz-Date=20250115T115843Z&X-Amz-Expires=3600&X-Amz-Signature=593997c427eb9185141f4461f2823ea12e62148e3a1c0bd8df8372422f97dcc3&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/42062da6-0924-445d-bc3d-1f0b30654317/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250115/us-west-2/s3/aws4_request&X-Amz-Date=20250115T115843Z&X-Amz-Expires=3600&X-Amz-Signature=1910df16ab4cb8c736ad1e9778fdf0ae9e25b115e24c59b680bca3e3515cf731&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/33e8ab87-f3f8-421a-82f6-606d6d291d34/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250115/us-west-2/s3/aws4_request&X-Amz-Date=20250115T115843Z&X-Amz-Expires=3600&X-Amz-Signature=b1a077904e3c8d3b859ce83c709b5a73c81efabfc2b6352f7afd77885b1fce5f&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p>varchar(位数)   50位字符串</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/ec84c633-da37-4911-b206-2d335e2af5da/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250115/us-west-2/s3/aws4_request&X-Amz-Date=20250115T115843Z&X-Amz-Expires=3600&X-Amz-Signature=50a2d29885c2162564eb0826bc65d271009f4b5d02cf0eafec50c6ae03af37db&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/c26c1e8c-419d-48b5-967b-35ccde4bed1d/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250115/us-west-2/s3/aws4_request&X-Amz-Date=20250115T115843Z&X-Amz-Expires=3600&X-Amz-Signature=92d5380da31dc4d8695553a82dadd10dba19d61102ab6aa5c32146df2876d948&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/1d5d9b27-0a05-4b9b-964e-53f706f09662/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C语言</title>
    <link href="http://example.com/posts/C%E8%AF%AD%E8%A8%80.html"/>
    <id>http://example.com/posts/C%E8%AF%AD%E8%A8%80.html</id>
    <published>2025-01-15T11:58:42.000Z</published>
    <updated>2025-01-15T11:58:42.233Z</updated>
    
    <content type="html"><![CDATA[<p>%d 十进制整数</p><p>scanf&#x2F;scanf_s 读取键盘输入</p><p>double x 定义双精度变量x</p><p><code>%.5f</code>表示输出一个双精度浮点数，保留 5 位小数<br>%lf 双精度浮点数<br>int（整型%d）、float（浮点型%f）、double（双浮点型%lf）、long（长整型%d）、char（字符型%c）</p><p>加减乘除+ - *  &#x2F;<br>取余% 自增++ 自减—</p><p>自增自减优先级较低<br>&#x3D;（赋值），优先级最低</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> STR <span class="hljs-string">&quot;Hello World!&quot;</span>#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>int main() &#123;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, STR);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;字符串的长度为：%zu\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(STR) - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>sizeof(MY_STRING)</code> 返回的是包括字符串末尾的空字符 <code>&#39;\0&#39;</code> 的整个字符数组的大小。所以需要减去 1 才是字符串的实际字符长度。 <code>%zu</code> 是用于输出 <code>size_t</code> 类型的格式说明符。</p><p>sprintf  是 C 语言标准库中的一个函数，用于将数据格式化并存储到指定的字符数组中。 其函数原型通常为： int sprintf(char *str, const char *format,…);  -  str  ：目标字符数组，用于存储格式化后的结果。-  format  ：格式化字符串，指定输出的格式。-  …  ：可变参数列表，对应要格式化的具体数据。 例如， sprintf(numStr, “%d”, num);  会将整数  num  以十进制整数的形式格式化并存储到  numStr  字符数组中。</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/62386d29-f990-4c2f-a904-6350c6ec076e/1000014995.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250115/us-west-2/s3/aws4_request&X-Amz-Date=20250115T115830Z&X-Amz-Expires=3600&X-Amz-Signature=5b1fefeade00dc0038a5bf4f1487b1f1e0c63c9ad7fad69fe8ff97800361f8cc&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/bd550b3c-6d14-41f9-a44e-7e1d1fd48604/1000014019.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250115/us-west-2/s3/aws4_request&X-Amz-Date=20250115T115830Z&X-Amz-Expires=3600&X-Amz-Signature=22ac849d3f09645ae0fd01bf6812bfe70f6623e270e020d26c2b889ed9ede680&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a><strong>冒泡排序</strong></h1><p>每一个字符与后一个字符比较，互换，交换数字为0时则所有数均有序，排序结束，交换次数为n-1</p><h1 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a><strong>直接插入排序</strong></h1><p>把每一次进行比较的数拿出来与前一个有序数字进行比较，出现小于则放到该数后一位（j+1）并跳出循环</p><p>排到最前面仍然没有出现比取出数小的数，此时直接跳出循环</p><p>即j&gt;&#x3D;0和temp&lt;a[j],最后a[j+1]&#x3D;temp temp为拿出来的数</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a><strong>特性</strong></h3><h3 id="1-时间复杂度"><a href="#1-时间复杂度" class="headerlink" title="1.时间复杂度"></a><strong>1.时间复杂度</strong></h3><p>最好情况就是全部有序，此时只需遍历一次，最好的时间复杂度为O ( n )</p><p>最坏情况全部反序，内层每次遍历已排序部分，最坏时间复杂度为O(n^2)</p><p>综上，因此<a href="https://so.csdn.net/so/search?q=%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F&spm=1001.2101.3001.7020">直接插入排序</a>的平均时间复杂度为 O(n^2)</p><h3 id="2-空间复杂度"><a href="#2-空间复杂度" class="headerlink" title="2.空间复杂度"></a><strong>2.空间复杂度</strong></h3><p>辅助空间是常量</p><p>平均的空间复杂度为：O ( 1 )</p><h3 id="3-算法稳定性"><a href="#3-算法稳定性" class="headerlink" title="3.算法稳定性"></a><strong>3.算法稳定性</strong></h3><p>相同元素的前后顺序是否改变</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/e8bef321-442b-4e59-a30c-ddc6f4523a2f/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250115/us-west-2/s3/aws4_request&X-Amz-Date=20250115T115836Z&X-Amz-Expires=3600&X-Amz-Signature=d21da8a11622610f360e62c7f177d984e2fe8187e1d75cc2245bfd26bf4f93e2&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p>插入到比它大的数前面，所以直接插入排序是稳定的</p><p>比如说 原本在前面的1和原本在后面的1 排序后相对位置不变 即为算法的稳定性</p><ol><li><p>程序的结构有哪些？<br>顺序结构，分支结构，循环结构</p></li><li><p>与或非？<br>&amp;&amp;（与），||（或），!（非）</p></li><li><p>分支结构（判断语句，if和switch）<br>if(判断条件){</p></li></ol><p>代码块（可以是if语句）</p><p>}</p><p>else if(判断条件){</p><p>代码块</p><p>}</p><p>else {</p><p>代码块</p><p>}</p><ol><li><p>编写一个程序，判断输入的数字是奇数还是偶数<br>课后作业：</p></li><li><p>把4（编写一个程序，判断输入的数字是奇数还是偶数）做一遍</p></li><li></li><li><p>for循环<br>for (初始化;循环条件;一次循环结束后运行的语句)</p></li></ol><p>{</p><p>循环代码块；</p><p>}</p><ol><li>while循环<br>while(循环条件)</li></ol><p>{</p><p>循环代码块；</p><p>}</p><p>课后作业：</p><p>洛谷B2081与7无关的数</p><p>（循环相关的题目都可以做做，至少做五个才能熟练）</p><ol><li>什么是数组 是一系列相同类型的变量</li><li>如何定义数组<br>type arrayName[ arraySize ];</li></ol><p>数据类型 数组名称 [数组大小];</p><p>&#x2F;&#x2F;数组大小必须是一个明确知道其数值的数</p><ol><li>如何调用数组<br>for(int i&#x3D;0;i&lt;&#x3D;2;i++){</li></ol><p>scanf(“%d”, &amp;arr[i]);</p><p>}</p><p>for(int i&#x3D;0;i&lt;&#x3D;2;i++){</p><p>printf(“%d\n”,arr[i]);</p><p>}</p><ol><li>字符串<br>字符串就是，数据类型为char的变量的顺序集合</li></ol><p>（char类型的数组）</p><p>课后作业：</p><p>1.数组求和</p><p>写一个程序，定义一个整型数组，输入5个整数，并计算这些整数的和。</p><p>2.数组反转</p><p>编写一个程序，输入一个包含10个整数的数组，然后反转这个数组并输出结果。</p><p>3.查找最大值</p><p>写一个程序，输入一个包含10个浮点数的数组，找出并输出数组中的最大值。</p><p>4.计算二维数组元素之和</p><p>描述：编写一个程序，计算一个3x3的整数二维数组所有元素的和，并输出结果。</p><ol><li><p>什么是函数<br>函数是一组一起执行一个任务的语句</p></li><li><p>函数的定义<br>数据类型 函数名（参数）</p></li></ol><p>{</p><p>函数体</p><p>}</p><p><strong>返回值的类型就是函数的数据类型，返回值本质上可以理解为，函数的值</strong></p><ol><li><p>函数的调用<br>函数名（实际参数）;</p></li><li><p>递归<br>递归：在函数里调用自己</p></li></ol><p>课后作业：</p><p>题目1：阶乘计算（递归）</p><p>描述：编写一个递归函数来计算一个非负整数的阶乘。</p><p>要求：</p><p>主函数中输入一个非负整数，调用递归函数计算并输出结果。</p><p>题目2：查找数组中的元素</p><p>描述：编写一个函数，用于在一个整数数组中查找特定元素，并返回其索引。如果未找到该元素，则返回 -1。</p><p>要求：</p><p>主函数中输入一个整数数组和要查找的元素，调用查找函数并输出结果。</p><p><a href="https://zhuanlan.zhihu.com/p/603216420">https://zhuanlan.zhihu.com/p/603216420</a></p><p><a href="https://zhuanlan.zhihu.com/p/603216420">https://zhuanlan.zhihu.com/p/603216420</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;%d 十进制整数&lt;/p&gt;
&lt;p&gt;scanf&amp;#x2F;scanf_s 读取键盘输入&lt;/p&gt;
&lt;p&gt;double x 定义双精度变量x&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%.5f&lt;/code&gt;表示输出一个双精度浮点数，保留 5 位小数&lt;br&gt;%lf 双精度浮点数&lt;br&gt;int（整型%</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>排序</title>
    <link href="http://example.com/posts/%E6%8E%92%E5%BA%8F.html"/>
    <id>http://example.com/posts/%E6%8E%92%E5%BA%8F.html</id>
    <published>2025-01-14T04:00:59.000Z</published>
    <updated>2025-01-14T04:00:59.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a><strong>冒泡排序</strong></h1><p>每一个字符与后一个字符比较，互换，交换数字为0时则所有数均有序，排序结束，交换次数为n-1</p><h1 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a><strong>直接插入排序</strong></h1><p>把每一次进行比较的数拿出来与前一个有序数字进行比较，出现小于则放到该数后一位（j+1）并跳出循环</p><p>排到最前面仍然没有出现比取出数小的数，此时直接跳出循环</p><p>即j&gt;&#x3D;0和temp&lt;a[j],最后a[j+1]&#x3D;temp temp为拿出来的数</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a><strong>特性</strong></h3><h3 id="1-时间复杂度"><a href="#1-时间复杂度" class="headerlink" title="1.时间复杂度"></a><strong>1.时间复杂度</strong></h3><p>最好情况就是全部有序，此时只需遍历一次，最好的时间复杂度为O ( n )</p><p>最坏情况全部反序，内层每次遍历已排序部分，最坏时间复杂度为O(n^2)</p><p>综上，因此<a href="https://so.csdn.net/so/search?q=%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F&spm=1001.2101.3001.7020">直接插入排序</a>的平均时间复杂度为 O(n^2)</p><h3 id="2-空间复杂度"><a href="#2-空间复杂度" class="headerlink" title="2.空间复杂度"></a><strong>2.空间复杂度</strong></h3><p>辅助空间是常量</p><p>平均的空间复杂度为：O ( 1 )</p><h3 id="3-算法稳定性"><a href="#3-算法稳定性" class="headerlink" title="3.算法稳定性"></a><strong>3.算法稳定性</strong></h3><p>相同元素的前后顺序是否改变</p><p>插入到比它大的数前面，所以直接插入排序是稳定的</p><p>比如说 原本在前面的1和原本在后面的1 排序后相对位置不变 即为算法的稳定性</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;&lt;strong&gt;冒泡排序&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;每一个字符与后一个字符比较，互换，交换数字为0时则所有数均有序，排序结束，交换次数为n-1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>黑马pink讲前端 html</title>
    <link href="http://example.com/posts/%E9%BB%91%E9%A9%ACpink%E8%AE%B2%E5%89%8D%E7%AB%AF%20html.html"/>
    <id>http://example.com/posts/%E9%BB%91%E9%A9%ACpink%E8%AE%B2%E5%89%8D%E7%AB%AF%20html.html</id>
    <published>2025-01-14T04:00:58.000Z</published>
    <updated>2025-01-14T04:00:58.502Z</updated>
    
    <content type="html"><![CDATA[<p>标题<h1> </h1></p><p>h1到h6 字号加大字体加粗 重要程度1到6递减 标题独占一行</p><p></p>段落<p><br />强制换行 否则会按照浏览器大小换行</p><p>div一行一个 span一行可以多个</p><ul><li>src是必要的 其他属性是选择性的</li><li>格式key＝”value”<br>空链接用#即未定义</li></ul><p>下载链接: 如果 href 里面地址是一个文件或者压缩包，会下载这个文件</p><h3 id="锚点链接"><a href="#锚点链接" class="headerlink" title="锚点链接"></a>锚点链接</h3><p>**重点记 空格&nbsp; 小于号&lt; 大于号&gt;</p><p>表格</p><table>写到table标签里面的如图<th>姓名</th> <th>性别</th> 表头 加粗<tr><td>一格</td><td>里面的内容</td><td>放td里面</td></tr><p>tr是一行 td是一格</p><thead>表头<tbody>表内<p>列表</p><p>1.无序标签<ul></p><li>内容</li>li里面可以包含任何元素<p>但是不能直接放到ul里面 </ul></p><p>2.有序标签 自动排序<ol></p><p>同样只能用<li>有顺序并且使用较少</p><p>3.自定义列表</p><dl>内部包含<dt>和<dd><p>dt是大的 dd是下方的解释</p><dt>帮助中心</dt><dd>账户管理</dd><p>表单</p><form>表单域定义<form action=”url” method=”提交方式(get/post)” name=”表单域的名称”></form><p>*<input>输入 通过改变type改变对应属性</p><p><input type=”属性” />是单标签</p><p>提示文字写在外面</p><body><pre><code>&lt;form&gt;    密码：&lt;input type=”password”&gt; &lt;br&gt;&lt;/form&gt;</code></pre></body><hr><p>所有相关的单选or复选项必须有相同的名字</p><p>即name标签相同以实现多选一</p><p>value 默认输入的值</p><p>checked&#x3D;”checked”即为默认勾选</p><p>maxlength不常用</p><p>数据标注标签</p><p><label for=”sex”>男</label><input type=”radio” name=”sex” id=”sex” /></p><p>作用是让点击男这个字的时候就能点到单选框</p><p>下拉菜单<select></p><select><pre><code>&lt;option&gt;选项1&lt;/option&gt;&lt;option&gt;选项2&lt;/option&gt;…</code></pre></select><p>默认选中</p><option selected=”selected”>火星</option><p>页面加载的时候默认停留在  火星</p><p>**select至少包含一对option</p><p>文本域textarea</p><textarea rows=”3” cols=”20”>框内预先出现的内容直接写在中间</textarea><p>cols&#x3D;每行中的字符数 rows＝显示的行数</p><p>但实际开发中使用CSS而不使用这种方式</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;标题&lt;h1&gt; &lt;/h1&gt;&lt;/p&gt;
&lt;p&gt;h1到h6 字号加大字体加粗 重要程度1到6递减 标题独占一行&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;段落

&lt;p&gt;&lt;br /&gt;强制换行 否则会按照浏览器大小换行&lt;/p&gt;
&lt;p&gt;div一行一个 span一行可以多个&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;src是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>黑马pink CSS</title>
    <link href="http://example.com/posts/%E9%BB%91%E9%A9%ACpink%20CSS.html"/>
    <id>http://example.com/posts/%E9%BB%91%E9%A9%ACpink%20CSS.html</id>
    <published>2025-01-14T04:00:55.000Z</published>
    <updated>2025-01-14T04:00:55.205Z</updated>
    
    <content type="html"><![CDATA[<p>CSS选择器</p><p>1.元素选择器（标签选择器）</p><ul><li><p>只能选择全部标签</p></li><li><p>写在body之前（<head></head>之间）写在<style>之间<br>p {</p><p>  color: red;</p></li></ul><p>}</p><p>111111</p><p>效果就是111111变红</p><p>选择了所有名为p的标签</p><p>2.类选择器（class）</p><p>.red {</p><pre><code>color: red;</code></pre><p>}</p><p class=”red”>1111</p><p>2222</p><p>效果只有1111变红 2222不变</p><ul><li>开头用.后面名字自定义 调用用class</li></ul><ol><li>id选择器</li></ol><ul><li>只能使用一次 一般配合JS</li><li>无需调用 一般用于唯一性元素</li><li>以＃定义</li></ul><p>#red {</p><p>color: red;</p><p>}</p><div id=”red”>1</div><p>4.通配符选择器</p><p>“选择所有标签”</p><p>*{</p><pre><code>  color: red;</code></pre><p>}</p><p>font-family 字体 英文中文都可以</p><p>font-size 单位px </p><p>font-weight 字体粗细</p><ul><li>bold加粗<br>建议直接用数字 font-weight 700;这种格式</li></ul><p>font-style 字体风格 normal正常 italic斜体</p><p>color 可以用单词 可以用rgb 可以用十六进制 ＃91bef0</p><p>text-align left左 right右 center居中</p><ul><li>给a href加none可以去掉链接的下划线</li></ul><p>text-indent 首行缩进：只需要选择段落然后text-indent 2em 相对缩进两个文字 也可以用px</p><p>line-height 行间距 包含上下间距加起来 可以用测量工具测px（上一行最下沿量到下一行最下沿）</p><style>理论上可以写在任何位置 但是一般写在head里面 称为嵌入式行内表则是写在单行里# 外部样式表建立.css文件 <link rel=”stylesheet” href=”css文件路径”>放到html里面以建立css和html的链接## Emmet语法写css只需写每个单词首字母＋内容w100→width: 100;tdnone→text－decoration: none;后代选择器 即元素父 元素子 ｛样式声明｝元素也可以用类选择器 且可以选择无数代* 与子选择器区分* 子选择器 .nav > li 只会选择最近一代并集选择器div,p{} 标签之间英文逗号分隔开、链接文字#333黑**块元素*** 块元素独占一行* 高度宽度外边距内边距可控* 宽度默认是父级宽度* 是一个容器，盒子，里面可以放行内和块元素**行内元素（内联元素）*** 相邻行内元素在一行上 一行可以显示多个* 高度宽度直接设置是无效的* 默认宽度是本身内容的宽度* 行内元素只能容纳文本/其他行内元素行内块元素<img /><input /><td>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;CSS选择器&lt;/p&gt;
&lt;p&gt;1.元素选择器（标签选择器）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;只能选择全部标签&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;写在body之前（&lt;head&gt;&lt;/head&gt;之间）写在&lt;style&gt;之间&lt;br&gt;p {&lt;/p&gt;
&lt;p&gt;  color: red;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>黑马pink JS</title>
    <link href="http://example.com/posts/%E9%BB%91%E9%A9%ACpink%20JS.html"/>
    <id>http://example.com/posts/%E9%BB%91%E9%A9%ACpink%20JS.html</id>
    <published>2025-01-14T04:00:53.000Z</published>
    <updated>2025-01-14T04:00:53.346Z</updated>
    
    <content type="html"><![CDATA[<ul><li>外部引入js：&lt;script src&#x3D;” “&gt; </script>双标签 里面不能再写内容</li><li>&#x2F;&#x2F; 单行注释</li><li>&#x2F;* 多行注释<br>多行注释 *&#x2F;</li></ul><p>var 声明变量</p><p>声明多个变量</p><p>**JS的变量数据类型是在程序运行过程中根据等号右边的值确定的</p><p>isNaN()判断 是数字返回false 不是数字返回true</p><p>console.log(isNaN(12));返回false</p><p>转义符</p><p>与C语言相同</p><p>获取字符串长度 xx.length</p><p>字符串可以用+拼接 ‘舞萌‘+’DX’输出舞萌DX</p><ul><li>数值+字符串&#x3D;字符串 alert(’11’ + 12) &#x2F;&#x2F; 1112</li><li>数值+数值&#x3D;数值和 alert(11+22) &#x2F;&#x2F; 33</li></ul><p>true和false在加法运算之中分别是1和0</p><p>undefined是未定义 null是空</p><p>prompt取到的值是字符型String</p><p>1是变量.toString()</p><p>2是String()           S必须大写</p><p>3（隐式转换）利用+拼接字符串num + ‘ ‘哪怕拼接一个空字符结果也变成字符串</p><p>parseInt取整变成数字型</p><p>（隐式转换）-0 * &#x2F;都可以</p><ul><li>前置自增 ＋＋num 返回自增值</li><li>后置自增 先返回原值再自增<br>除了0其他数字都返回真</li></ul><p>if判断 如果（条件表达式）结果为真 执行大括号的内容 假则不执行</p><p>表达式符合value就执行</p><ul><li>后面加default 如果都不符合就使用default后面语句<br>continue 跳出当前次循环 执行下一次循环</li></ul><p>break 跳出循环</p><p>数组名.length 统计数组长度 出来的是个数</p><p>return后面的代码不会被执行</p><p>return 只能返回一个值 如果给他多个值用逗号隔开 会返回靠后的那一个</p><p>*但是可以把结果放到数组里面</p><p>arguments作为伪数组</p><p>*具有数组的length属性</p><p>*按照索引方式存储</p><p>*没有真数组的一些方法比如push</p><p>找作用域的时候可以从目标反向查找一层一层的查找</p><p>预解析 js引擎会把js 里面所有的 var 还有 function 提升到当前作用域的最前面</p><p>构造函数不需要return也可以返回结果</p><p>遍历对象用for in ，里面的变量k不需要单独赋值可以直接用</p><p>随机整数：（最小值，最大值）闭区间</p><p>Date 月份+1 周一返回1 周日返回0</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;外部引入js：&amp;lt;script src&amp;#x3D;” “&amp;gt; &lt;/script&gt;双标签 里面不能再写内容&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F; 单行注释&lt;/li&gt;
&lt;li&gt;&amp;#x2F;* 多行注释&lt;br&gt;多行注释 *&amp;#x2F;&lt;/li&gt;
&lt;/ul</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>黑马VUE</title>
    <link href="http://example.com/posts/%E9%BB%91%E9%A9%ACVUE.html"/>
    <id>http://example.com/posts/%E9%BB%91%E9%A9%ACVUE.html</id>
    <published>2025-01-14T04:00:49.000Z</published>
    <updated>2025-01-14T04:00:49.919Z</updated>
    
    <content type="html"><![CDATA[<p>VUE是用于构建用户页面的渐进式框架</p><p>用this代替当前const变量名 指向当前实例</p><p>参数位置补形参</p><p>v-for&#x3D;”(item,index) in list”</p><p>list&#x3D;[’1’,’2’,’3’] 循环item的话会出来123 index会出来下标（012)</p><p>不写index可以省略 可以item in list</p><p>发送初始化渲染请求：创建阶段</p><p>操作DOM：挂载阶段</p><p>生命周期钩子</p><p>操作dom在mounted阶段后 </p><p>watch(newValue,oldValue){</p><p>}</p><p>↑保留两位小数</p><p>scoped 全局改局部组件</p><p>父传子</p><p>子改父</p><p>删除：filter自己id 保留其他的id 先监听得到id 子传父上传id filter过滤id</p><p>本地持久化：watch深度监听 名称.setItem(key,value)把value值存入key JSON.stringify()转化为JSON字符串</p><p>在需要显示的（列表）位置用getItem拿出来 用JSON.parse()重转换为原始格式</p><p>e 事件默认参数</p><p>v-model仅在父组件中使用 子组件不能用</p><p>v-model  ⇒ :value+@input</p><p>value接收value绑定父组件vmodel 必须触发input(this.$emit(’input’,xxxx)</p><p>:visible.sync ⇒  :visible+@update:visible</p><p>子组件this.$emit(’update:visible’,false)父组件:visible.sync&#x3D;”isShow”把false通过sync传给父isshow</p><p>值确实不是value了（不是表单了）可以用,sync平常可以直接v-model</p><p>**ref和$refs</p><p>第一步：给目标标签加上ref &lt;div ref&#x3D;”xxx”</p><p>第二步 恰当时机（渲染完毕 mounted（）{ this.$refs.xxx获取目标标签</p><p>！！父组件可以通过此方法直接使用子组件的方法</p><p>VUE异步更新：$nextTick this.$nextTick(函数体）等dom更新之后才会触发执行此方法里的函数体</p><p>插槽 需要定制的位置<slot></slot>占位</p><p>然后在使用组件时在组件标签里面填内容</p><p>也可以写div等标签 不是只能文本</p><p>当在slot之间写的文本则被作为没有传入的默认内容</p><p>多个插槽用name区分 slot name&#x3D;” “ 然后原来的组件里面直接写内容改成&lt;template #name&gt;来分发对应标签</p><p>删除或查看都需要用到当前项目的id</p><p>npm install <a href="mailto:&#x76;&#x75;&#101;&#45;&#x72;&#x6f;&#117;&#116;&#x65;&#x72;&#64;&#x33;&#46;&#54;&#x2e;&#53;">&#x76;&#x75;&#101;&#45;&#x72;&#x6f;&#117;&#116;&#x65;&#x72;&#64;&#x33;&#46;&#54;&#x2e;&#53;</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;VUE是用于构建用户页面的渐进式框架&lt;/p&gt;
&lt;p&gt;用this代替当前const变量名 指向当前实例&lt;/p&gt;
&lt;p&gt;参数位置补形参&lt;/p&gt;
&lt;p&gt;v-for&amp;#x3D;”(item,index) in list”&lt;/p&gt;
&lt;p&gt;list&amp;#x3D;[’1’,’2’,’3’]</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>扫盲</title>
    <link href="http://example.com/posts/%E6%89%AB%E7%9B%B2.html"/>
    <id>http://example.com/posts/%E6%89%AB%E7%9B%B2.html</id>
    <published>2025-01-14T04:00:46.000Z</published>
    <updated>2025-01-14T04:00:46.433Z</updated>
    
    <content type="html"><![CDATA[<p>sep&#x3D;’分隔符’ end&#x3D;’结尾符’</p><p>type（a)  ⇒a的类型 &lt;class ‘类型’&gt;</p><p>input输入的都是字符串 int()转化成整数</p><p>**次方 **0.5就是根号</p><p>int转float:直接转换<br>float转int:舍弃小数<br>int转bool:非0:True、0:False<br>bool转int:False:0、True:1<br>转str:直接转换</p><p>整除&#x2F;&#x2F;</p><p>逻辑运算符 and  or not 与或非</p><p>成员运算符 in ，not in 检测输出布尔值torf</p><p>身份运算符 is ，is not 检测输出布尔值torf</p><p>成员是检测是否存在的某个容器里面（列表 字符串 字典）</p><p>身份是直接比较是否是同一个对象（在内存中的身份）</p><p>and和or均为双目运算符.具有左结合性<br>not为单目运算符，具有右结合性</p><p><code>**and**</code> 会在左边是 <code>False</code> 时短路，<code>**or**</code> 会在左边是 <code>True</code> 时短路。</p><p>if elif else</p><p>range(start默认0,stop结束但是不含stop，step默认1</p><p>for&lt;变量&gt;in&lt;序列或者可以迭代的对象&gt;</p><p>例如for i in range (5)</p><p>break跳出整个循环体 continue跳出当轮循环继续下一轮</p><p>九九乘法表</p><p><code>for i in range(1,10):    </code></p><p><code>for j in range(1,i+1):#start默认0开始 range不包含stop </code></p><p><code>      print(f&quot;&#123;j&#125;*&#123;i&#125;=&#123;i*j&#125;&quot;, end=&quot;\t&quot;)  </code></p><p><code> print()</code></p><p>*n的因子最大大小是n&#x2F;&#x2F;2+1</p><p>在 Python 中，列表（<code>list</code>）中的元素类型不一定要相同</p><p>a.append(x) 在列表a末尾添加元素x</p><p>a.expend(x) 在列表a末尾添加x，x为可迭代的对象，包括列表，元组，字符串等 不能是单个数字</p><p>a.insert(idx,x) 列表a在下标为idx的位置插入元素x，原来的元素向右移动一个位置</p><p>del a[下标]删除元素</p><p>a.pop(下标)删除元素</p><p>a.pop()删除a中最后一个元素</p><p>*区别是 del删除没有返回值 pop删除后返回被删掉的元素</p><p>根据值可以删除元素：a.remove(x)删除列表a中值是x的第一个元素</p><p>while x in a</p><p>a.remove(x)</p><p>运用循环结构删除列表里面所有值为x的元素</p><p>a.count(X)返回x在a中出现的次数 没出现则是0</p><p>a.index(x,start,stop)计算元素x在列表a下标[start,stop)中第一次出现的位置</p><p>1.要保证x必须在区间[start,stop)中存在，否则报错</p><p>2.start,stop如果不赋值则查找整个列表</p><p>3.只赋值start和stop则默认是列表长度</p><p>a.reverse()给列表a翻转</p><p>len(a)输出列表a的长度（是几个数就是几）</p><p>enumerate() 返回一个迭代器 包含索引和对应值的元组 (index,value)</p><h1 id="示例-1：基本用法"><a href="#示例-1：基本用法" class="headerlink" title="示例 1：基本用法"></a>示例 1：基本用法</h1><p>my_list &#x3D; [‘apple’, ‘banana’, ‘cherry’]<br>for index, value in enumerate(my_list):<br>print(f”Index: {index}, Value: {value}”)</p><p>输出</p><p>Index: 0, Value: apple<br>Index: 1, Value: banana<br>Index: 2, Value: cherry</p><p>sum(a)求和  max(a)求最大值  min(a)最小值</p><p>列表解析式 a &#x3D; [x<strong>2 for x in range(11) if x % 2 &#x3D;&#x3D; 0]遍历range11 先进行if判定 true的进行x</strong>2加入新列表</p><p>列表切片 ：列表的部分元素组成新列表</p><p>start:stop:step 不包含start包含stop 例如 2:4:1 即第三个和第四个</p><p>复制列表时，b&#x3D;a[:]和b&#x3D;a.copy()等价</p><p>元组 假如b是一个list c&#x3D;tuple(b)即可创建元组c </p><p>区别是元组无法修改内部元素 需要转换成list 其余一样</p><p>四舍五入round（） 精确到几位就是round(数，几）例如精确到小数点后两位就是</p><p>round(xxx,2)</p><p>&lt;左对齐 &gt;右对齐   ^居中 </p><p>sign标记 仅对数字类型有效 +-正数和负数</p><p>字典</p><p>a&#x3D;{}创建了一个空字典</p><p>a&#x3D;{ ‘key’:value,’key2’:value}key和value之间用冒号分割</p><p>a&#x3D;dict(key1&#x3D;value,key2&#x3D;value2)此时key只能是字符串而其他情况下key可以是数字，字符串和元组，大部分时候是用字符串，而value的类型没有限制</p><p>拉链函数zip(迭代1，迭代2…)把多个序列 相同下标的元素 组装成元组 结果是一个可迭代的对象 结果key转化成list但是首次转化之后迭代器就会被清空（即无法继续使用，变成空迭代器）</p><p>keys&#x3D;[’a’,’b’,’c’]</p><p>value&#x3D;[123,456,789]</p><p>a&#x3D;dict(list(zip(keys,value)))</p><p>print(”a&#x3D;”,a)</p><p>集合 大括号 存储不可变的数据 集合内元素都是唯一的</p><p>time.time()时间戳</p><p>time.sleep(X)程序睡眠X秒</p><p>time.localtime()返回本地时间，是一个struct_time对象（st对象之间不可加减）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;sep&amp;#x3D;’分隔符’ end&amp;#x3D;’结尾符’&lt;/p&gt;
&lt;p&gt;type（a)  ⇒a的类型 &amp;lt;class ‘类型’&amp;gt;&lt;/p&gt;
&lt;p&gt;input输入的都是字符串 int()转化成整数&lt;/p&gt;
&lt;p&gt;**次方 **0.5就是根号&lt;/p&gt;
&lt;p&gt;int转f</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>蓝桥模拟题</title>
    <link href="http://example.com/posts/%E8%93%9D%E6%A1%A5%E6%A8%A1%E6%8B%9F%E9%A2%98.html"/>
    <id>http://example.com/posts/%E8%93%9D%E6%A1%A5%E6%A8%A1%E6%8B%9F%E9%A2%98.html</id>
    <published>2025-01-14T04:00:39.000Z</published>
    <updated>2025-01-14T04:00:39.360Z</updated>
    
    <content type="html"><![CDATA[<ol><li></li></ol><p>对于两个整数 a, b，既是 a 的整数倍又是 b 的整数倍的数称为 a 和 b 的公倍数。公倍数中最小的正整数称为 a 和 b 的最小公倍数。</p><p>请问， 2024 和 1024 的最小公倍数是多少？</p><p><code>import math</code></p><p><code>def lcm(a,b): </code></p><p><code>   return abs(a*b)//math.gcd(a,b)</code></p><p><code>a=2024</code></p><p><code>b=1024</code></p><p><code>result=lcm(a,b)</code></p><p><code>print(result)</code></p><p>2.十进制转二进制</p><p>def decimal_to_binary(n):<br>return bin(n)[2:]  # 去掉 ‘0b’ 前缀</p><p>n &#x3D; 2024<br>print(decimal_to_binary(n))</p><p>3.a与b异或是a^b</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于两个整数 a, b，既是 a 的整数倍又是 b 的整数倍的数称为 a 和 b 的公倍数。公倍数中最小的正整数称为 a 和 b 的最小公倍数。&lt;/p&gt;
&lt;p&gt;请问， 2024 和 1024 的最小公倍数是多少？&lt;/p&gt;
&lt;p&gt;&lt;c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://example.com/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html"/>
    <id>http://example.com/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</id>
    <published>2025-01-14T04:00:38.000Z</published>
    <updated>2025-01-14T04:00:38.092Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>前端</title>
    <link href="http://example.com/posts/%E5%89%8D%E7%AB%AF.html"/>
    <id>http://example.com/posts/%E5%89%8D%E7%AB%AF.html</id>
    <published>2025-01-14T04:00:36.000Z</published>
    <updated>2025-01-14T04:00:36.945Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/6446d771-59a0-4a08-bb42-15c885d03516/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=886ac1312949e64de9d44dcb4cf793fb15ff62569354e7dc31c74216ae264e89&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/6cb22c08-f2d9-4e99-8c08-ffe46e0c1ccf/Screenshot_2024-10-08-15-14-54-800_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=6c3a128dc1b5a640990206e1702a5d3695f79d72d5473f53108d072eb98e1a15&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p>标题<h1> </h1></p><p>h1到h6 字号加大字体加粗 重要程度1到6递减 标题独占一行</p><p></p>段落<p><br />强制换行 否则会按照浏览器大小换行</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/15c8e5b9-b90a-4b1c-bfdd-0e6be5ff4dae/Screenshot_2024-10-08-16-32-42-471_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=b33fb85774e7f86b995884ece8f386fa14ca585a9f75b2f4c22392c9f69a3e53&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/4a28994a-9ed6-441f-8a16-fffc538d1620/Screenshot_2024-10-08-16-53-50-408_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=fdcd0d3988a653682268213137aa14ef91f72d0412b5eb8faea1b02f7902017a&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p>div一行一个 span一行可以多个</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/4b7e4c4e-e0b9-4dd5-ac20-08c070c09845/Screenshot_2024-10-08-16-55-28-479_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=8d652a335ec1cda23bbc58755d9ca0f6cb95c0a3bc27f02ddb4a786f992f67e5&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/166fdd2a-3d8a-4692-8b09-cbe6e63cc3c5/Screenshot_2024-10-08-16-57-52-158_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=6e32f4996c8b8814c2aea74428e032280ace91cd9abf15c98727e920e64b9d9f&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/c8a3cde0-93d5-4e4d-9d45-8af858c2aea7/Screenshot_2024-10-08-16-58-31-881_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=ec7d02bb552c80cbe1a7594b95330df6046e35988a561526e3e0a6e09467f707&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><ul><li>src是必要的 其他属性是选择性的</li><li>格式key＝”value”<br><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/ac9b5eb0-eb26-4380-9a5a-2ec4985635a2/Screenshot_2024-10-08-17-21-53-991_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=75bf46aa480a8855071a5911a350855bfa37b3d773b14cdcc6fff996e0c150bf&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></li></ul><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/5cc5da71-48b5-40a2-992a-582aaa6b08a2/Screenshot_2024-10-08-17-25-43-831_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=1cd80fe54c217398022825f5a8ae16a51f9bbe25020a81620d70a3fe7f02eb7a&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/4979230f-c7b5-4762-be05-da35d5ae7710/Screenshot_2024-10-08-17-32-38-774_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=05f973d2c2c7735068f83980f1f5e9c1a50887c5fbabb61ee56ed77e2cae9400&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/12b31c0d-adc9-48a0-8d26-8a14ed79a257/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=58513bebfdeb36ca515d97ee78b6100ab2f718c5dfff66629eba9ab8a58d5f28&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p>空链接用#即未定义</p><p>下载链接: 如果 href 里面地址是一个文件或者压缩包，会下载这个文件</p><h3 id="锚点链接"><a href="#锚点链接" class="headerlink" title="锚点链接"></a>锚点链接</h3><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/28f4d5f6-6140-4a2e-99b0-bc78240fcd6c/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=f2954b8b4df6f8a6111edcaa451a9d94c81da2029b85704b43d867cb4d7a7678&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/e8fe9fb1-7b94-48df-90fa-ccef92f170f4/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=d5f67c0f8bfdc61c57809b42a42ce6f16c9e71c9aeb10667fbc3417f219feed1&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p>**重点记 空格&nbsp; 小于号&lt; 大于号&gt;</p><p>表格</p><table>写到table标签里面的如图<th>姓名</th> <th>性别</th> 表头 加粗<p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/4089a238-954a-4e87-be11-f8f2bc830c01/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=c35141e7f4f6282bcd1087f5060ea6135cd937c358786363bfb35e360b1524f4&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><tr><td>一格</td><td>里面的内容</td><td>放td里面</td></tr><p>tr是一行 td是一格</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/bcb43954-2e65-4ddb-b634-d68ad531bd48/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=d19c917c5510f11a4d776bb1f1a3465c7ba2665cf9e746e6998751326735ffd4&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><thead>表头<tbody>表内<p>列表</p><p>1.无序标签<ul></p><li>内容</li>li里面可以包含任何元素<p>但是不能直接放到ul里面 </ul></p><p>2.有序标签 自动排序<ol></p><p>同样只能用<li>有顺序并且使用较少</p><p>3.自定义列表</p><dl>内部包含<dt>和<dd><p>dt是大的 dd是下方的解释</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/d124bcc2-3bef-445c-b9cf-865f982eb6ad/Screenshot_2024-10-11-14-15-03-459_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=909c7d3f0a0b35a6fdc38e26f16cd1212b230b99a10e00e0a615905df27772b9&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><dt>帮助中心</dt><dd>账户管理</dd><p>表单</p><form>表单域定义<form action=”url” method=”提交方式(get/post)” name=”表单域的名称”></form><p>*<input>输入 通过改变type改变对应属性</p><p><input type=”属性” />是单标签</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/5106b282-dc31-45da-8a8f-4ea578474cf9/Screenshot_2024-10-11-14-18-53-304_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=150218d400eb393d6963b05e15f85daac881c0b63ab4daf3a2f2e6693cbd75bc&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p>提示文字写在外面</p><body><pre><code>&lt;form&gt;    密码：&lt;input type=”password”&gt; &lt;br&gt;&lt;/form&gt;</code></pre></body><hr><p>所有相关的单选or复选项必须有相同的名字</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/4b24ee8c-6801-4686-8636-157388615178/Screenshot_2024-10-11-14-21-46-606_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=0b512d0c6a40cb85e6c1cc326ed99d1ac22a00ff068ffac562bfd49abf0abb04&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p>即name标签相同以实现多选一</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/99a14e3a-148a-42f5-8460-b99f5e7ddb82/Screenshot_2024-10-11-14-22-50-401_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=5703e66a98126266c5e6cc62003392ed5a17632ca8a7c50797e3ecf8adaf1f70&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p>value 默认输入的值</p><p>checked&#x3D;”checked”即为默认勾选</p><p>maxlength不常用</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/2ce82d91-a1a4-4810-9a64-5de9eb06e7fc/Screenshot_2024-10-11-14-24-36-231_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=9e01367adb517b21b9aca14d66c9fa18d4185595603ed559b663fafd4d638ad7&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/e047bd98-e7e5-40ff-a80b-7c791570f5f0/Screenshot_2024-10-11-14-26-54-875_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=8bccaca086ac259ceb40f915374fb2981fbd28cefe95f2e2d53e6aff08c2a0d7&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p>数据标注标签</p><p><label for=”sex”>男</label><input type=”radio” name=”sex” id=”sex” /></p><p>作用是让点击男这个字的时候就能点到单选框</p><p>下拉菜单<select></p><select><pre><code>&lt;option&gt;选项1&lt;/option&gt;&lt;option&gt;选项2&lt;/option&gt;…</code></pre></select><p>默认选中</p><option selected=”selected”>火星</option><p>页面加载的时候默认停留在  火星</p><p>**select至少包含一对option</p><p>文本域textarea</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/bf94b1d5-cf1e-4199-9281-d7e94df47792/Screenshot_2024-10-11-14-37-20-158_notion.id.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035908Z&X-Amz-Expires=3600&X-Amz-Signature=db1c835694607cace7ac0007e48b0102c971c6a9a4313e313fd02294a4082b71&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><textarea rows=”3” cols=”20”>框内预先出现的内容直接写在中间</textarea><p>cols&#x3D;每行中的字符数 rows＝显示的行数</p><p>但实际开发中使用CSS而不使用这种方式</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/0db15ac4-2362-401a-9975-82e7eccee64d/Screenshot_2024-10-11-15-44-41-653_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=b648575007205424457cf6276e68a2db850ef7626b334000c374436f276693de&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p>CSS选择器</p><p>1.元素选择器（标签选择器）</p><ul><li><p>只能选择全部标签</p></li><li><p>写在body之前（<head></head>之间）写在<style>之间<br>p {</p><p>  color: red;</p></li></ul><p>}</p><p>111111</p><p>效果就是111111变红</p><p>选择了所有名为p的标签</p><p>2.类选择器（class）</p><p>.red {</p><pre><code>color: red;</code></pre><p>}</p><p class=”red”>1111</p><p>2222</p><p>效果只有1111变红 2222不变</p><ul><li>开头用.后面名字自定义 调用用class<br><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/aa9ebec7-daec-4cca-bd43-542b8ec8b2e0/Screenshot_2024-10-11-16-38-55-202_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=7630d663daad72fc310a922f0f40fb6a8bcc5eb48875b1273bb588805e61c431&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></li></ul><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/96ffd375-1ccc-4b34-b33a-b29729a3b0e0/Screenshot_2024-10-11-16-39-06-899_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=a0d793debc5608d06b2bd62e434862b4a1b0e3d54e0d0b05c4115d51218bcbff&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><ol><li>id选择器</li></ol><ul><li>只能使用一次 一般配合JS</li><li>无需调用 一般用于唯一性元素</li><li>以＃定义</li></ul><p>#red {</p><p>color: red;</p><p>}</p><div id=”red”>1</div><p>4.通配符选择器</p><p>“选择所有标签”</p><p>*{</p><pre><code>  color: red;</code></pre><p>}</p><p>font-family 字体 英文中文都可以</p><p>font-size 单位px </p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/4468e871-6de3-461f-84ad-025e4928cac7/Screenshot_2024-10-12-18-30-25-004_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=d0cafabc645312b343088ff1228996031ed44ca7728de1b3759980615a5046fc&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p>font-weight 字体粗细</p><ul><li>bold加粗<br><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/1a092b06-f2ab-4702-b23e-6d1ea2786878/Screenshot_2024-10-12-18-32-46-354_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=79182a024a66930ded9772d364528f77789329a013cc0c6a7b224ec280117db8&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></li></ul><p>建议直接用数字 font-weight 700;这种格式</p><p>font-style 字体风格 normal正常 italic斜体</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/57ee1031-6a35-40c9-a4ab-3a3c0d5494a1/Screenshot_2024-10-12-18-42-05-060_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=9fa241ba334e41a5d3b42dba3a176bbf01c10bd3366e973428196e7c590ad0a4&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/7331fd0f-0a20-4af6-bfb0-52dd500f3978/Screenshot_2024-10-12-18-44-48-253_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=5422e9abbecba0c73291700efb1a35a49d045f91ded912a28d5a2a6ecd3fb1e3&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/e12ec5ef-d3d5-4055-8b62-02074b9d7365/Screenshot_2024-10-12-18-45-43-210_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=ef4c0d65653e50027fedf2a5d01757e6f157a1853b980d0a2447b499d2b53b00&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/4dbec1d8-6e6e-4273-a51c-60a34be5c9b0/Screenshot_2024-10-12-18-47-20-708_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=600537d5d15778cb6b19c2bed9b1366ec9abea49bcebfad05009365df706df3a&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><p>color 可以用单词 可以用rgb 可以用十六进制 ＃91bef0</p><p>text-align left左 right右 center居中</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/6a1e433a-ec00-4e5e-8507-133ad7ce1dee/Screenshot_2024-10-12-18-56-48-462_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X/20250114/us-west-2/s3/aws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=6b75166ef0a2143d9f1bc10b9753b208def5ab07223e115b25888e5e99a93c1c&X-Amz-SignedHeaders=host&x-id=GetObject" alt="image"></p><ul><li>给a href加none可以去掉链接的下划线</li></ul><p>text-indent 首行缩进：只需要选择段落然后text-indent 2em 相对缩进两个文字 也可以用px</p><p>line-height 行间距 包含上下间距加起来 可以用测量工具测px（上一行最下沿量到下一行最下沿）</p><style>理论上可以写在任何位置 但是一般写在head里面 称为嵌入式行内表则是![image](https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/5a0ca87a-39c8-46f2-8f05-6551fd1cfc19/Screenshot_2024-10-12-19-14-34-606_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X%2F20250114%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=0a260936ea13426294691b4280ff03626b276f63f47215bff6a3c721b5e8c4d1&X-Amz-SignedHeaders=host&x-id=GetObject)写在单行里# 外部样式表建立.css文件 <link rel=”stylesheet” href=”css文件路径”>放到html里面以建立css和html的链接![image](https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/c1a61077-cd60-4362-a7b0-ee525af8909e/Screenshot_2024-10-12-19-45-22-149_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X%2F20250114%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=06ed99edddfb91be2abdf2f2ad4392c4d76f414d9a8362a314bf9554b3916acc&X-Amz-SignedHeaders=host&x-id=GetObject)## Emmet语法![image](https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/5933256f-9612-4f81-8ddb-a038b0e80d5d/Screenshot_2024-10-12-19-50-39-323_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X%2F20250114%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=88d98e6ad8649873898ee8699cf2f2b2a65269b762ea145fdb8e8c2538ee6edf&X-Amz-SignedHeaders=host&x-id=GetObject)写css只需写每个单词首字母＋内容w100→width: 100;tdnone→text－decoration: none;![image](https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/7302d59e-05d8-4284-a927-ca0e01c51811/Screenshot_2024-10-12-20-11-25-046_tv.danmaku.bili-edit.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X%2F20250114%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=d057601f7dcda9f5cab193cb63cb7370b56565b15254ba77594ceedcdaf0b6b3&X-Amz-SignedHeaders=host&x-id=GetObject)后代选择器 即元素父 元素子 ｛样式声明｝元素也可以用类选择器 且可以选择无数代* 与子选择器区分* 子选择器 .nav > li 只会选择最近一代![image](https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/25b6efe1-1dbd-4158-8c9f-f40ef85f347e/Screenshot_2024-10-12-20-30-58-599_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X%2F20250114%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=b9e5d85cdb7addae591b35a086bfea69539ec969db8aa934382e3e0596afac30&X-Amz-SignedHeaders=host&x-id=GetObject)并集选择器div,p{} 标签之间英文逗号分隔开、链接文字#333黑**块元素*** 块元素独占一行* 高度宽度外边距内边距可控* 宽度默认是父级宽度* 是一个容器，盒子，里面可以放行内和块元素**行内元素（内联元素）*** 相邻行内元素在一行上 一行可以显示多个* 高度宽度直接设置是无效的* 默认宽度是本身内容的宽度* 行内元素只能容纳文本/其他行内元素行内块元素<img /><input /><td>* 外部引入js：<script src=” “> </script>双标签 里面不能再写内容* // 单行注释* /* 多行注释多行注释 */var 声明变量声明多个变量**JS的变量数据类型是在程序运行过程中根据等号右边的值确定的isNaN()判断 是数字返回false 不是数字返回trueconsole.log(isNaN(12));返回false转义符与C语言相同获取字符串长度 xx.length字符串可以用+拼接 ‘舞萌‘+’DX’输出舞萌DX* 数值+字符串=字符串 alert(’11’ + 12) // 1112* 数值+数值=数值和 alert(11+22) // 33true和false在加法运算之中分别是1和0undefined是未定义 null是空prompt取到的值是字符型String1是变量.toString()2是String()           S必须大写3（隐式转换）利用+拼接字符串num + ‘ ‘哪怕拼接一个空字符结果也变成字符串parseInt取整变成数字型（隐式转换）-0 * /都可以* 前置自增 ＋＋num 返回自增值* 后置自增 先返回原值再自增除了0其他数字都返回真if判断 如果（条件表达式）结果为真 执行大括号的内容 假则不执行表达式符合value就执行* 后面加default 如果都不符合就使用default后面语句continue 跳出当前次循环 执行下一次循环break 跳出循环数组名.length 统计数组长度 出来的是个数return后面的代码不会被执行return 只能返回一个值 如果给他多个值用逗号隔开 会返回靠后的那一个*但是可以把结果放到数组里面arguments作为伪数组*具有数组的length属性*按照索引方式存储*没有真数组的一些方法比如push找作用域的时候可以从目标反向查找一层一层的查找预解析 js引擎会把js 里面所有的 var 还有 function 提升到当前作用域的最前面构造函数不需要return也可以返回结果遍历对象用for in ，里面的变量k不需要单独赋值可以直接用随机整数：（最小值，最大值）闭区间Date 月份+1 周一返回1 周日返回0VUE是用于构建用户页面的渐进式框架用this代替当前const变量名 指向当前实例参数位置补形参v-for=”(item,index) in list”list=[’1’,’2’,’3’] 循环item的话会出来123 index会出来下标（012)不写index可以省略 可以item in list发送初始化渲染请求：创建阶段操作DOM：挂载阶段生命周期钩子操作dom在mounted阶段后 watch(newValue,oldValue){}↑保留两位小数scoped 全局改局部组件父传子子改父删除：filter自己id 保留其他的id 先监听得到id 子传父上传id filter过滤id本地持久化：watch深度监听 名称.setItem(key,value)把value值存入key JSON.stringify()转化为JSON字符串在需要显示的（列表）位置用getItem拿出来 用JSON.parse()重转换为原始格式e 事件默认参数v-model仅在父组件中使用 子组件不能用v-model  ⇒ :value+@inputvalue接收value绑定父组件vmodel 必须触发input(this.$emit(’input’,xxxx):visible.sync ⇒  :visible+@update:visible子组件this.$emit(’update:visible’,false)父组件:visible.sync=”isShow”把false通过sync传给父isshow值确实不是value了（不是表单了）可以用,sync平常可以直接v-model**ref和$refs第一步：给目标标签加上ref <div ref=”xxx”第二步 恰当时机（渲染完毕 mounted（）{ this.$refs.xxx获取目标标签！！父组件可以通过此方法直接使用子组件的方法VUE异步更新：$nextTick this.$nextTick(函数体）等dom更新之后才会触发执行此方法里的函数体插槽 需要定制的位置<slot></slot>占位然后在使用组件时在组件标签里面填内容也可以写div等标签 不是只能文本当在slot之间写的文本则被作为没有传入的默认内容多个插槽用name区分 slot name=” “ 然后原来的组件里面直接写内容改成<template #name>来分发对应标签删除或查看都需要用到当前项目的idnpm install vue-router@3.6.5]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/6446d771-59a0-4a08-bb42-15c885d03516/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PTA题</title>
    <link href="http://example.com/posts/PTA%E9%A2%98.html"/>
    <id>http://example.com/posts/PTA%E9%A2%98.html</id>
    <published>2025-01-13T19:09:27.000Z</published>
    <updated>2025-01-13T19:09:27.107Z</updated>
    
    <content type="html"><![CDATA[<p>斐波那契数列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">feibo</span>(<span class="hljs-params">n</span>):<br>    fib = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> n&lt;=<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">if</span> n==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(fib)&lt;n:<br>        fib.append(fib[-<span class="hljs-number">1</span>]+fib[-<span class="hljs-number">2</span>])<br>    <span class="hljs-keyword">return</span> fib<br>n=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>result=feibo(n)<br><span class="hljs-built_in">print</span>(result)<br><br></code></pre></td></tr></table></figure><p>2025.1.9-1.13</p><p>抱歉给您带来了困惑。让我详细解释一下 <code>return -1, comparisons</code> 的作用，以及为什么它不会在每次调用时都返回 <code>-1</code>。</p><h3 id="1-理解-return-1-comparisons-的逻辑"><a href="#1-理解-return-1-comparisons-的逻辑" class="headerlink" title="1. 理解 **return -1, comparisons** 的逻辑"></a><strong>1. 理解 <strong><code>**return -1, comparisons**</code></strong> 的逻辑</strong></h3><p>在您的二分查找函数 <code>bisect_left_count</code> 中，<code>return -1, comparisons</code> 这一行 <strong>仅在以下情况下执行</strong>：</p><ul><li><strong>目标值 <strong><code>**x**</code></strong> 不存在于数组 <strong><code>**a**</code></strong> 中</strong>。</li><li>**整个搜索过程完成，但未找到 **<code>**x**</code>。<br>这意味着，如果目标值 <code>x</code> 存在于数组 <code>a</code> 中，函数会在找到 <code>x</code> 时立即通过 <code>return mid, comparisons</code> 返回相应的下标和比较次数，而不会执行 <code>return -1, comparisons</code>。</li></ul><h3 id="2-函数执行流程"><a href="#2-函数执行流程" class="headerlink" title="2. 函数执行流程"></a><strong>2. 函数执行流程</strong></h3><p>让我们一步一步分析函数的执行流程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">bisect_left_count</span>(<span class="hljs-params">a, x, lo=<span class="hljs-number">0</span>, hi=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> hi <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        hi = <span class="hljs-built_in">len</span>(a)-<span class="hljs-number">1</span>  <span class="hljs-comment"># -1代表包含上界</span><br><br>    comparisons = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> lo &lt;= hi:<br>        mid = (lo + hi) // <span class="hljs-number">2</span><br>        comparisons += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> a[mid] == x:<br>            <span class="hljs-keyword">return</span> mid, comparisons  <span class="hljs-comment"># 找到x，立即返回</span><br>        <span class="hljs-keyword">elif</span> a[mid] &lt; x:<br>            lo = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            hi = mid - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>, comparisons  <span class="hljs-comment"># 未找到x，返回-1</span><br><br></code></pre></td></tr></table></figure><ol><li><strong>初始化</strong>：</li></ol><ul><li><code>lo</code>：搜索范围的下界，初始为 <code>0</code>。</li><li><code>hi</code>：搜索范围的上界，初始为 <code>len(a) - 1</code>（包含上界）。</li></ul><ol><li><strong>循环条件</strong>：</li></ol><ul><li>当 <code>lo &lt;= hi</code> 时，继续搜索。</li><li>计算中间位置 <code>mid = (lo + hi) // 2</code>。</li></ul><ol><li><strong>比较</strong>：</li></ol><ul><li>**如果 **<code>**a[mid] == x**</code>：</li><li>找到了目标值，返回当前下标 <code>mid</code> 和比较次数 <code>comparisons</code>。</li><li>**如果 **<code>**a[mid] &lt; x**</code>：</li><li>目标值在右半部分，更新下界 <code>lo = mid + 1</code>。</li><li><strong>否则</strong>：</li><li>目标值在左半部分，更新上界 <code>hi = mid - 1</code>。</li></ul><ol><li><strong>未找到</strong>：</li></ol><ul><li>如果循环结束后仍未找到 <code>x</code>，返回 <code>1</code> 和总比较次数 <code>comparisons</code>。</li></ul><h3 id="3-示例分析"><a href="#3-示例分析" class="headerlink" title="3. 示例分析"></a><strong>3. 示例分析</strong></h3><p>让我们通过具体的示例来理解函数的行为。</p><h3 id="示例-1：目标值存在"><a href="#示例-1：目标值存在" class="headerlink" title="示例 1：目标值存在"></a><strong>示例 1：目标值存在</strong></h3><p><strong>输入</strong>：</p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">4<br>1 2 3 4<br>1<br><br></code></pre></td></tr></table></figure><p><strong>执行步骤</strong>：</p><ol><li><strong>第一次比较</strong>：</li></ol><ul><li><code>lo = 0</code>, <code>hi = 3</code></li><li><code>mid = (0 + 3) // 2 = 1</code></li><li><code>a[1] = 2</code></li><li>比较 <code>2 == 1</code> → 否</li><li>比较 <code>2 &lt; 1</code> → 否</li><li>更新 <code>hi = 0</code></li><li>比较次数：1</li></ul><ol><li><strong>第二次比较</strong>：</li></ol><ul><li><code>lo = 0</code>, <code>hi = 0</code></li><li><code>mid = (0 + 0) // 2 = 0</code></li><li><code>a[0] = 1</code></li><li>比较 <code>1 == 1</code> → 是</li><li>返回 <code>0</code> 和比较次数 <code>2</code><br><strong>输出</strong>：</li></ul><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">0<br>2<br><br></code></pre></td></tr></table></figure><h3 id="示例-2：目标值不存在"><a href="#示例-2：目标值不存在" class="headerlink" title="示例 2：目标值不存在"></a><strong>示例 2：目标值不存在</strong></h3><p><strong>输入</strong>：</p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">4<br>1 2 3 4<br>5<br><br></code></pre></td></tr></table></figure><p><strong>执行步骤</strong>：</p><ol><li><strong>第一次比较</strong>：</li></ol><ul><li><code>lo = 0</code>, <code>hi = 3</code></li><li><code>mid = 1</code></li><li><code>a[1] = 2</code></li><li>比较 <code>2 == 5</code> → 否</li><li>比较 <code>2 &lt; 5</code> → 是</li><li>更新 <code>lo = 2</code></li><li>比较次数：1</li></ul><ol><li><strong>第二次比较</strong>：</li></ol><ul><li><code>lo = 2</code>, <code>hi = 3</code></li><li><code>mid = 2</code></li><li><code>a[2] = 3</code></li><li>比较 <code>3 == 5</code> → 否</li><li>比较 <code>3 &lt; 5</code> → 是</li><li>更新 <code>lo = 3</code></li><li>比较次数：2</li></ul><ol><li><strong>第三次比较</strong>：</li></ol><ul><li><code>lo = 3</code>, <code>hi = 3</code></li><li><code>mid = 3</code></li><li><code>a[3] = 4</code></li><li>比较 <code>4 == 5</code> → 否</li><li>比较 <code>4 &lt; 5</code> → 是</li><li>更新 <code>lo = 4</code></li><li>比较次数：3</li></ul><ol><li><strong>循环结束</strong>：</li></ol><ul><li><code>lo = 4</code>, <code>hi = 3</code>，满足 <code>lo &gt; hi</code>，退出循环。</li><li>返回 <code>1</code> 和 <code>3</code><br><strong>输出</strong>：</li></ul><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">-1<br>3<br><br></code></pre></td></tr></table></figure><h3 id="4-常见问题排查"><a href="#4-常见问题排查" class="headerlink" title="4. 常见问题排查"></a><strong>4. 常见问题排查</strong></h3><p>如果您发现函数 **总是返回 **<code>**-1**</code>，请检查以下几点：</p><ol><li><strong>输入是否正确</strong>：</li></ol><ul><li>确保输入的数组确实包含目标值。</li><li>确保数组是<strong>非降序排列</strong>的。</li></ul><ol><li><strong>拼写错误</strong>：</li></ol><ul><li>确保在 <code>else</code> 分支中使用 <code>hi = mid - 1</code>，而不是 <code>hi = mid1 - 1</code>。</li><li>确保所有变量名正确，无拼写错误。</li></ul><ol><li><strong>数据类型</strong>：</li></ol><ul><li>确保输入的 <code>n</code>、数组元素和 <code>x</code> 都是整数。</li></ul><ol><li><strong>数组长度</strong>：</li></ol><ul><li>确保数组的长度与输入的 <code>n</code> 值一致。</li></ul><h3 id="5-添加调试信息"><a href="#5-添加调试信息" class="headerlink" title="5. 添加调试信息"></a><strong>5. 添加调试信息</strong></h3><p>为了更好地理解函数的执行过程，您可以在函数中添加调试打印信息。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">bisect_left_count</span>(<span class="hljs-params">a, x, lo=<span class="hljs-number">0</span>, hi=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> hi <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        hi = <span class="hljs-built_in">len</span>(a)-<span class="hljs-number">1</span>  <span class="hljs-comment"># -1代表包含上界</span><br><br>    comparisons = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> lo &lt;= hi:<br>        mid = (lo + hi) // <span class="hljs-number">2</span><br>        comparisons +=<span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Comparing x=<span class="hljs-subst">&#123;x&#125;</span> with a[<span class="hljs-subst">&#123;mid&#125;</span>]=<span class="hljs-subst">&#123;a[mid]&#125;</span>&quot;</span>)  <span class="hljs-comment"># 调试信息</span><br>        <span class="hljs-keyword">if</span> a[mid] == x:<br>            <span class="hljs-keyword">return</span> mid, comparisons<br>        <span class="hljs-keyword">elif</span> a[mid] &lt; x:<br>            lo = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            hi = mid - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>, comparisons<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>a = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>x = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>result, comps = bisect_left_count(a, x, hi=n-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-built_in">print</span>(comps)<br><br></code></pre></td></tr></table></figure><p><strong>示例运行</strong>：</p><p><strong>输入</strong>：</p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">4<br>1 2 3 4<br>1<br><br></code></pre></td></tr></table></figure><p><strong>输出</strong>：</p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">Comparing x=1 with a[1]=2<br>Comparing x=1 with a[0]=1<br>0<br>2<br><br></code></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li><strong>第一次比较</strong>：<code>a[1] = 2</code> 不等于 <code>1</code>，更新 <code>hi = 0</code>。</li><li><strong>第二次比较</strong>：<code>a[0] = 1</code> 等于 <code>1</code>，返回下标 <code>0</code> 和比较次数 <code>2</code>。</li></ul><h3 id="6-完整修正后的代码"><a href="#6-完整修正后的代码" class="headerlink" title="6. 完整修正后的代码"></a><strong>6. 完整修正后的代码</strong></h3><p>以下是完整的、经过修正并包含调试信息的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">bisect_left_count</span>(<span class="hljs-params">a, x, lo=<span class="hljs-number">0</span>, hi=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> hi <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        hi = <span class="hljs-built_in">len</span>(a)-<span class="hljs-number">1</span>  <span class="hljs-comment"># -1代表包含上界</span><br><br>    comparisons = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> lo &lt;= hi:<br>        mid = (lo + hi) // <span class="hljs-number">2</span><br>        comparisons +=<span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Comparing x=<span class="hljs-subst">&#123;x&#125;</span> with a[<span class="hljs-subst">&#123;mid&#125;</span>]=<span class="hljs-subst">&#123;a[mid]&#125;</span>&quot;</span>)  <span class="hljs-comment"># 调试信息</span><br>        <span class="hljs-keyword">if</span> a[mid] == x:<br>            <span class="hljs-keyword">return</span> mid, comparisons<br>        <span class="hljs-keyword">elif</span> a[mid] &lt; x:<br>            lo = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            hi = mid - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>, comparisons<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">try</span>:<br>        n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-number">1</span> &lt;= n &lt;= <span class="hljs-number">1000</span>):<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;n值必须在1到1000之间。&quot;</span>)<br><br>        a = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a) != n:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;数组的长度与n值不匹配。&quot;</span>)<br><br>        <span class="hljs-comment"># 检查数组是否为非降序排列</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(a[i] &gt; a[i+<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>)):<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;数组必须按非降序排列。&quot;</span>)<br><br>        x = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><br>        result, comps = bisect_left_count(a, x, hi=n-<span class="hljs-number">1</span>)<br><br>        <span class="hljs-built_in">print</span>(result)<br>        <span class="hljs-built_in">print</span>(comps)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;输入错误: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><h3 id="7-进一步建议"><a href="#7-进一步建议" class="headerlink" title="7. 进一步建议"></a><strong>7. 进一步建议</strong></h3><ul><li><strong>移除调试信息</strong>：在确认代码正确后，可以移除 <code>print(f&quot;Comparing x=&#123;x&#125; with a[&#123;mid&#125;]=&#123;a[mid]&#125;&quot;)</code> 这一行，以保持输出的清洁。</li><li><strong>输入验证</strong>：确保输入符合题目要求，数组按非降序排列，且 <code>n</code> 的值在 <code>[1, 1000]</code> 之间。</li><li><strong>测试不同案例</strong>：尝试不同的输入案例，既包括目标值存在的情况，也包括不存在的情况，以确保函数在各种情况下都能正常工作。</li></ul><h3 id="8-完整示例运行"><a href="#8-完整示例运行" class="headerlink" title="8. 完整示例运行"></a><strong>8. 完整示例运行</strong></h3><h3 id="案例-1：目标值存在"><a href="#案例-1：目标值存在" class="headerlink" title="案例 1：目标值存在"></a><strong>案例 1：目标值存在</strong></h3><p><strong>输入</strong>：</p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">4<br>1 2 3 4<br>1<br><br></code></pre></td></tr></table></figure><p><strong>输出</strong>：</p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">Comparing x=1 with a[1]=2<br>Comparing x=1 with a[0]=1<br>0<br>2<br><br></code></pre></td></tr></table></figure><h3 id="案例-2：目标值不存在"><a href="#案例-2：目标值不存在" class="headerlink" title="案例 2：目标值不存在"></a><strong>案例 2：目标值不存在</strong></h3><p><strong>输入</strong>：</p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">4<br>1 2 3 4<br>5<br><br></code></pre></td></tr></table></figure><p><strong>输出</strong>：</p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">Comparing x=5 with a[1]=2<br>Comparing x=5 with a[2]=3<br>Comparing x=5 with a[3]=4<br>-1<br>3<br><br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><code>**return -1, comparisons**</code>** 的含义**：仅在目标值 <code>x</code> 不存在于数组 <code>a</code> 中时返回 <code>1</code> 和比较次数。</li><li><strong>提前返回</strong>：如果找到 <code>x</code>，函数会立即返回对应的下标和比较次数，不会执行 <code>return -1, comparisons</code>。</li><li><strong>调试与验证</strong>：通过添加调试信息，您可以清楚地看到每一步的比较过程，帮助您理解函数的执行流程并排查问题。<br>如果您按照上述说明检查并运行代码，应该能够正确地执行二分查找并获得预期的结果。如果仍然遇到问题，请确保输入格式正确，并尝试使用调试信息来进一步分析问题所在。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;斐波那契数列&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World！</title>
    <link href="http://example.com/posts/1.html"/>
    <id>http://example.com/posts/1.html</id>
    <published>2024-12-22T11:04:23.000Z</published>
    <updated>2024-12-22T13:08:01.764Z</updated>
    
    <content type="html"><![CDATA[<p>在Stellar主题下的第一篇博客。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Stellar主题下的第一篇博客。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="杂谈" scheme="http://example.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="日常" scheme="http://example.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
</feed>
