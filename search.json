[{"title":"Django","path":"/posts/Django.html","content":"1pip install django 安装Django"},{"title":"MySQL","path":"/posts/MySQL.html","content":"如果不存在则创建 varchar(位数) 50位字符串"},{"title":"C语言","path":"/posts/C语言.html","content":"%d 十进制整数 scanf&#x2F;scanf_s 读取键盘输入 double x 定义双精度变量x %.5f表示输出一个双精度浮点数，保留 5 位小数%lf 双精度浮点数int（整型%d）、float（浮点型%f）、double（双浮点型%lf）、long（长整型%d）、char（字符型%c） 加减乘除+ - * &#x2F;取余% 自增++ 自减— 自增自减优先级较低&#x3D;（赋值），优先级最低 12345#define STR &quot;Hello World!&quot;#include &lt;stdio.h&gt;int main() &#123; printf(&quot;%s &quot;, STR); printf(&quot;字符串的长度为：%zu &quot;, sizeof(STR) - 1); return 0;&#125; sizeof(MY_STRING) 返回的是包括字符串末尾的空字符 &#39;\\0&#39; 的整个字符数组的大小。所以需要减去 1 才是字符串的实际字符长度。 %zu 是用于输出 size_t 类型的格式说明符。 sprintf 是 C 语言标准库中的一个函数，用于将数据格式化并存储到指定的字符数组中。 其函数原型通常为： int sprintf(char *str, const char *format,…); - str ：目标字符数组，用于存储格式化后的结果。- format ：格式化字符串，指定输出的格式。- … ：可变参数列表，对应要格式化的具体数据。 例如， sprintf(numStr, “%d”, num); 会将整数 num 以十进制整数的形式格式化并存储到 numStr 字符数组中。 冒泡排序每一个字符与后一个字符比较，互换，交换数字为0时则所有数均有序，排序结束，交换次数为n-1 直接插入排序把每一次进行比较的数拿出来与前一个有序数字进行比较，出现小于则放到该数后一位（j+1）并跳出循环 排到最前面仍然没有出现比取出数小的数，此时直接跳出循环 即j&gt;&#x3D;0和temp&lt;a[j],最后a[j+1]&#x3D;temp temp为拿出来的数 特性1.时间复杂度最好情况就是全部有序，此时只需遍历一次，最好的时间复杂度为O ( n ) 最坏情况全部反序，内层每次遍历已排序部分，最坏时间复杂度为O(n^2) 综上，因此直接插入排序的平均时间复杂度为 O(n^2) 2.空间复杂度辅助空间是常量 平均的空间复杂度为：O ( 1 ) 3.算法稳定性相同元素的前后顺序是否改变 插入到比它大的数前面，所以直接插入排序是稳定的 比如说 原本在前面的1和原本在后面的1 排序后相对位置不变 即为算法的稳定性 程序的结构有哪些？顺序结构，分支结构，循环结构 与或非？&amp;&amp;（与），||（或），!（非） 分支结构（判断语句，if和switch）if(判断条件){ 代码块（可以是if语句） } else if(判断条件){ 代码块 } else { 代码块 } 编写一个程序，判断输入的数字是奇数还是偶数课后作业： 把4（编写一个程序，判断输入的数字是奇数还是偶数）做一遍 for循环for (初始化;循环条件;一次循环结束后运行的语句) { 循环代码块； } while循环while(循环条件) { 循环代码块； } 课后作业： 洛谷B2081与7无关的数 （循环相关的题目都可以做做，至少做五个才能熟练） 什么是数组 是一系列相同类型的变量 如何定义数组type arrayName[ arraySize ]; 数据类型 数组名称 [数组大小]; &#x2F;&#x2F;数组大小必须是一个明确知道其数值的数 如何调用数组for(int i&#x3D;0;i&lt;&#x3D;2;i++){ scanf(“%d”, &amp;arr[i]); } for(int i&#x3D;0;i&lt;&#x3D;2;i++){ printf(“%d ”,arr[i]); } 字符串字符串就是，数据类型为char的变量的顺序集合 （char类型的数组） 课后作业： 1.数组求和 写一个程序，定义一个整型数组，输入5个整数，并计算这些整数的和。 2.数组反转 编写一个程序，输入一个包含10个整数的数组，然后反转这个数组并输出结果。 3.查找最大值 写一个程序，输入一个包含10个浮点数的数组，找出并输出数组中的最大值。 4.计算二维数组元素之和 描述：编写一个程序，计算一个3x3的整数二维数组所有元素的和，并输出结果。 什么是函数函数是一组一起执行一个任务的语句 函数的定义数据类型 函数名（参数） { 函数体 } 返回值的类型就是函数的数据类型，返回值本质上可以理解为，函数的值 函数的调用函数名（实际参数）; 递归递归：在函数里调用自己 课后作业： 题目1：阶乘计算（递归） 描述：编写一个递归函数来计算一个非负整数的阶乘。 要求： 主函数中输入一个非负整数，调用递归函数计算并输出结果。 题目2：查找数组中的元素 描述：编写一个函数，用于在一个整数数组中查找特定元素，并返回其索引。如果未找到该元素，则返回 -1。 要求： 主函数中输入一个整数数组和要查找的元素，调用查找函数并输出结果。 https://zhuanlan.zhihu.com/p/603216420 https://zhuanlan.zhihu.com/p/603216420"},{"title":"排序","path":"/posts/排序.html","content":"冒泡排序每一个字符与后一个字符比较，互换，交换数字为0时则所有数均有序，排序结束，交换次数为n-1 直接插入排序把每一次进行比较的数拿出来与前一个有序数字进行比较，出现小于则放到该数后一位（j+1）并跳出循环 排到最前面仍然没有出现比取出数小的数，此时直接跳出循环 即j&gt;&#x3D;0和temp&lt;a[j],最后a[j+1]&#x3D;temp temp为拿出来的数 特性1.时间复杂度最好情况就是全部有序，此时只需遍历一次，最好的时间复杂度为O ( n ) 最坏情况全部反序，内层每次遍历已排序部分，最坏时间复杂度为O(n^2) 综上，因此直接插入排序的平均时间复杂度为 O(n^2) 2.空间复杂度辅助空间是常量 平均的空间复杂度为：O ( 1 ) 3.算法稳定性相同元素的前后顺序是否改变 插入到比它大的数前面，所以直接插入排序是稳定的 比如说 原本在前面的1和原本在后面的1 排序后相对位置不变 即为算法的稳定性"},{"title":"黑马pink讲前端 html","path":"/posts/黑马pink讲前端 html.html","content":"标题 h1到h6 字号加大字体加粗 重要程度1到6递减 标题独占一行 段落 强制换行 否则会按照浏览器大小换行 div一行一个 span一行可以多个 src是必要的 其他属性是选择性的 格式key＝”value”空链接用#即未定义 下载链接: 如果 href 里面地址是一个文件或者压缩包，会下载这个文件 锚点链接**重点记 空格&nbsp; 小于号&lt; 大于号&gt; 表格 写到table标签里面的如图 姓名 性别 表头 加粗 一格里面的内容放td里面 tr是一行 td是一格 表头表内 列表 1.无序标签 内容li里面可以包含任何元素 但是不能直接放到ul里面 2.有序标签 自动排序 同样只能用有顺序并且使用较少 3.自定义列表 内部包含和 dt是大的 dd是下方的解释 帮助中心 账户管理 表单 表单域定义 *输入 通过改变type改变对应属性 是单标签 提示文字写在外面 &lt;form&gt; 密码：&lt;input type=”password”&gt; &lt;br&gt; &lt;/form&gt; 所有相关的单选or复选项必须有相同的名字 即name标签相同以实现多选一 value 默认输入的值 checked&#x3D;”checked”即为默认勾选 maxlength不常用 数据标注标签 男 作用是让点击男这个字的时候就能点到单选框 下拉菜单 &lt;option&gt;选项1&lt;/option&gt; &lt;option&gt;选项2&lt;/option&gt; … 默认选中 火星 页面加载的时候默认停留在 火星 **select至少包含一对option 文本域textarea 框内预先出现的内容直接写在中间 cols&#x3D;每行中的字符数 rows＝显示的行数 但实际开发中使用CSS而不使用这种方式"},{"title":"黑马pink CSS","path":"/posts/黑马pink CSS.html","content":"CSS选择器 1.元素选择器（标签选择器） 只能选择全部标签 写在body之前（之间）写在之间p { color: red; } 111111 效果就是111111变红 选择了所有名为p的标签 2.类选择器（class） .red { color: red; } 1111 2222 效果只有1111变红 2222不变 开头用.后面名字自定义 调用用class id选择器 只能使用一次 一般配合JS 无需调用 一般用于唯一性元素 以＃定义 #red { color: red; } 1 4.通配符选择器 “选择所有标签” *{ color: red; } font-family 字体 英文中文都可以 font-size 单位px font-weight 字体粗细 bold加粗建议直接用数字 font-weight 700;这种格式 font-style 字体风格 normal正常 italic斜体 color 可以用单词 可以用rgb 可以用十六进制 ＃91bef0 text-align left左 right右 center居中 给a href加none可以去掉链接的下划线 text-indent 首行缩进：只需要选择段落然后text-indent 2em 相对缩进两个文字 也可以用px line-height 行间距 包含上下间距加起来 可以用测量工具测px（上一行最下沿量到下一行最下沿） 理论上可以写在任何位置 但是一般写在head里面 称为嵌入式 行内表则是 写在单行里 # 外部样式表 建立.css文件 放到html里面 以建立css和html的链接 ## Emmet语法 写css只需写每个单词首字母＋内容 w100→width: 100; tdnone→text－decoration: none; 后代选择器 即 元素父 元素子 ｛样式声明｝ 元素也可以用类选择器 且可以选择无数代 * 与子选择器区分 * 子选择器 .nav > li 只会选择最近一代 并集选择器 div,p{ } 标签之间英文逗号分隔开、 链接文字#333黑 **块元素** * 块元素独占一行 * 高度宽度外边距内边距可控 * 宽度默认是父级宽度 * 是一个容器，盒子，里面可以放行内和块元素 **行内元素（内联元素）** * 相邻行内元素在一行上 一行可以显示多个 * 高度宽度直接设置是无效的 * 默认宽度是本身内容的宽度 * 行内元素只能容纳文本/其他行内元素 行内块元素"},{"title":"黑马pink JS","path":"/posts/黑马pink JS.html","content":"外部引入js：&lt;script src&#x3D;” “&gt; 双标签 里面不能再写内容 &#x2F;&#x2F; 单行注释 &#x2F;* 多行注释多行注释 *&#x2F; var 声明变量 声明多个变量 **JS的变量数据类型是在程序运行过程中根据等号右边的值确定的 isNaN()判断 是数字返回false 不是数字返回true console.log(isNaN(12));返回false 转义符 与C语言相同 获取字符串长度 xx.length 字符串可以用+拼接 ‘舞萌‘+’DX’输出舞萌DX 数值+字符串&#x3D;字符串 alert(’11’ + 12) &#x2F;&#x2F; 1112 数值+数值&#x3D;数值和 alert(11+22) &#x2F;&#x2F; 33 true和false在加法运算之中分别是1和0 undefined是未定义 null是空 prompt取到的值是字符型String 1是变量.toString() 2是String() S必须大写 3（隐式转换）利用+拼接字符串num + ‘ ‘哪怕拼接一个空字符结果也变成字符串 parseInt取整变成数字型 （隐式转换）-0 * &#x2F;都可以 前置自增 ＋＋num 返回自增值 后置自增 先返回原值再自增除了0其他数字都返回真 if判断 如果（条件表达式）结果为真 执行大括号的内容 假则不执行 表达式符合value就执行 后面加default 如果都不符合就使用default后面语句continue 跳出当前次循环 执行下一次循环 break 跳出循环 数组名.length 统计数组长度 出来的是个数 return后面的代码不会被执行 return 只能返回一个值 如果给他多个值用逗号隔开 会返回靠后的那一个 *但是可以把结果放到数组里面 arguments作为伪数组 *具有数组的length属性 *按照索引方式存储 *没有真数组的一些方法比如push 找作用域的时候可以从目标反向查找一层一层的查找 预解析 js引擎会把js 里面所有的 var 还有 function 提升到当前作用域的最前面 构造函数不需要return也可以返回结果 遍历对象用for in ，里面的变量k不需要单独赋值可以直接用 随机整数：（最小值，最大值）闭区间 Date 月份+1 周一返回1 周日返回0"},{"title":"黑马VUE","path":"/posts/黑马VUE.html","content":"VUE是用于构建用户页面的渐进式框架 用this代替当前const变量名 指向当前实例 参数位置补形参 v-for&#x3D;”(item,index) in list” list&#x3D;[’1’,’2’,’3’] 循环item的话会出来123 index会出来下标（012) 不写index可以省略 可以item in list 发送初始化渲染请求：创建阶段 操作DOM：挂载阶段 生命周期钩子 操作dom在mounted阶段后 watch(newValue,oldValue){ } ↑保留两位小数 scoped 全局改局部组件 父传子 子改父 删除：filter自己id 保留其他的id 先监听得到id 子传父上传id filter过滤id 本地持久化：watch深度监听 名称.setItem(key,value)把value值存入key JSON.stringify()转化为JSON字符串 在需要显示的（列表）位置用getItem拿出来 用JSON.parse()重转换为原始格式 e 事件默认参数 v-model仅在父组件中使用 子组件不能用 v-model ⇒ :value+@input value接收value绑定父组件vmodel 必须触发input(this.$emit(’input’,xxxx) :visible.sync ⇒ :visible+@update:visible 子组件this.$emit(’update:visible’,false)父组件:visible.sync&#x3D;”isShow”把false通过sync传给父isshow 值确实不是value了（不是表单了）可以用,sync平常可以直接v-model **ref和$refs 第一步：给目标标签加上ref &lt;div ref&#x3D;”xxx” 第二步 恰当时机（渲染完毕 mounted（）{ this.$refs.xxx获取目标标签 ！！父组件可以通过此方法直接使用子组件的方法 VUE异步更新：$nextTick this.$nextTick(函数体）等dom更新之后才会触发执行此方法里的函数体 插槽 需要定制的位置占位 然后在使用组件时在组件标签里面填内容 也可以写div等标签 不是只能文本 当在slot之间写的文本则被作为没有传入的默认内容 多个插槽用name区分 slot name&#x3D;” “ 然后原来的组件里面直接写内容改成&lt;template #name&gt;来分发对应标签 删除或查看都需要用到当前项目的id npm install &#x76;&#x75;&#101;&#45;&#x72;&#x6f;&#117;&#116;&#x65;&#x72;&#64;&#x33;&#46;&#54;&#x2e;&#53;"},{"title":"扫盲","path":"/posts/扫盲.html","content":"sep&#x3D;’分隔符’ end&#x3D;’结尾符’ type（a) ⇒a的类型 &lt;class ‘类型’&gt; input输入的都是字符串 int()转化成整数 **次方 **0.5就是根号 int转float:直接转换float转int:舍弃小数int转bool:非0:True、0:Falsebool转int:False:0、True:1转str:直接转换 整除&#x2F;&#x2F; 逻辑运算符 and or not 与或非 成员运算符 in ，not in 检测输出布尔值torf 身份运算符 is ，is not 检测输出布尔值torf 成员是检测是否存在的某个容器里面（列表 字符串 字典） 身份是直接比较是否是同一个对象（在内存中的身份） and和or均为双目运算符.具有左结合性not为单目运算符，具有右结合性 **and** 会在左边是 False 时短路，**or** 会在左边是 True 时短路。 if elif else range(start默认0,stop结束但是不含stop，step默认1 for&lt;变量&gt;in&lt;序列或者可以迭代的对象&gt; 例如for i in range (5) break跳出整个循环体 continue跳出当轮循环继续下一轮 九九乘法表 for i in range(1,10): for j in range(1,i+1):#start默认0开始 range不包含stop print(f&quot;&#123;j&#125;*&#123;i&#125;=&#123;i*j&#125;&quot;, end=&quot;\\t&quot;) print() *n的因子最大大小是n&#x2F;&#x2F;2+1 在 Python 中，列表（list）中的元素类型不一定要相同 a.append(x) 在列表a末尾添加元素x a.expend(x) 在列表a末尾添加x，x为可迭代的对象，包括列表，元组，字符串等 不能是单个数字 a.insert(idx,x) 列表a在下标为idx的位置插入元素x，原来的元素向右移动一个位置 del a[下标]删除元素 a.pop(下标)删除元素 a.pop()删除a中最后一个元素 *区别是 del删除没有返回值 pop删除后返回被删掉的元素 根据值可以删除元素：a.remove(x)删除列表a中值是x的第一个元素 while x in a a.remove(x) 运用循环结构删除列表里面所有值为x的元素 a.count(X)返回x在a中出现的次数 没出现则是0 a.index(x,start,stop)计算元素x在列表a下标[start,stop)中第一次出现的位置 1.要保证x必须在区间[start,stop)中存在，否则报错 2.start,stop如果不赋值则查找整个列表 3.只赋值start和stop则默认是列表长度 a.reverse()给列表a翻转 len(a)输出列表a的长度（是几个数就是几） enumerate() 返回一个迭代器 包含索引和对应值的元组 (index,value) 示例 1：基本用法my_list &#x3D; [‘apple’, ‘banana’, ‘cherry’]for index, value in enumerate(my_list):print(f”Index: {index}, Value: {value}”) 输出 Index: 0, Value: appleIndex: 1, Value: bananaIndex: 2, Value: cherry sum(a)求和 max(a)求最大值 min(a)最小值 列表解析式 a &#x3D; [x2 for x in range(11) if x % 2 &#x3D;&#x3D; 0]遍历range11 先进行if判定 true的进行x2加入新列表 列表切片 ：列表的部分元素组成新列表 start:stop:step 不包含start包含stop 例如 2:4:1 即第三个和第四个 复制列表时，b&#x3D;a[:]和b&#x3D;a.copy()等价 元组 假如b是一个list c&#x3D;tuple(b)即可创建元组c 区别是元组无法修改内部元素 需要转换成list 其余一样 四舍五入round（） 精确到几位就是round(数，几）例如精确到小数点后两位就是 round(xxx,2) &lt;左对齐 &gt;右对齐 ^居中 sign标记 仅对数字类型有效 +-正数和负数 字典 a&#x3D;{}创建了一个空字典 a&#x3D;{ ‘key’:value,’key2’:value}key和value之间用冒号分割 a&#x3D;dict(key1&#x3D;value,key2&#x3D;value2)此时key只能是字符串而其他情况下key可以是数字，字符串和元组，大部分时候是用字符串，而value的类型没有限制 拉链函数zip(迭代1，迭代2…)把多个序列 相同下标的元素 组装成元组 结果是一个可迭代的对象 结果key转化成list但是首次转化之后迭代器就会被清空（即无法继续使用，变成空迭代器） keys&#x3D;[’a’,’b’,’c’] value&#x3D;[123,456,789] a&#x3D;dict(list(zip(keys,value))) print(”a&#x3D;”,a) 集合 大括号 存储不可变的数据 集合内元素都是唯一的 time.time()时间戳 time.sleep(X)程序睡眠X秒 time.localtime()返回本地时间，是一个struct_time对象（st对象之间不可加减）"},{"title":"蓝桥模拟题","path":"/posts/蓝桥模拟题.html","content":"对于两个整数 a, b，既是 a 的整数倍又是 b 的整数倍的数称为 a 和 b 的公倍数。公倍数中最小的正整数称为 a 和 b 的最小公倍数。 请问， 2024 和 1024 的最小公倍数是多少？ import math def lcm(a,b): return abs(a*b)//math.gcd(a,b) a=2024 b=1024 result=lcm(a,b) print(result) 2.十进制转二进制 def decimal_to_binary(n):return bin(n)[2:] # 去掉 ‘0b’ 前缀 n &#x3D; 2024print(decimal_to_binary(n)) 3.a与b异或是a^b"},{"title":"前端","path":"/posts/前端.html","content":"标题 h1到h6 字号加大字体加粗 重要程度1到6递减 标题独占一行 段落 强制换行 否则会按照浏览器大小换行 div一行一个 span一行可以多个 src是必要的 其他属性是选择性的 格式key＝”value” 空链接用#即未定义 下载链接: 如果 href 里面地址是一个文件或者压缩包，会下载这个文件 锚点链接 **重点记 空格&nbsp; 小于号&lt; 大于号&gt; 表格 写到table标签里面的如图 姓名 性别 表头 加粗 一格里面的内容放td里面 tr是一行 td是一格 表头表内 列表 1.无序标签 内容li里面可以包含任何元素 但是不能直接放到ul里面 2.有序标签 自动排序 同样只能用有顺序并且使用较少 3.自定义列表 内部包含和 dt是大的 dd是下方的解释 帮助中心 账户管理 表单 表单域定义 *输入 通过改变type改变对应属性 是单标签 提示文字写在外面 &lt;form&gt; 密码：&lt;input type=”password”&gt; &lt;br&gt; &lt;/form&gt; 所有相关的单选or复选项必须有相同的名字 即name标签相同以实现多选一 value 默认输入的值 checked&#x3D;”checked”即为默认勾选 maxlength不常用 数据标注标签 男 作用是让点击男这个字的时候就能点到单选框 下拉菜单 &lt;option&gt;选项1&lt;/option&gt; &lt;option&gt;选项2&lt;/option&gt; … 默认选中 火星 页面加载的时候默认停留在 火星 **select至少包含一对option 文本域textarea 框内预先出现的内容直接写在中间 cols&#x3D;每行中的字符数 rows＝显示的行数 但实际开发中使用CSS而不使用这种方式 CSS选择器 1.元素选择器（标签选择器） 只能选择全部标签 写在body之前（之间）写在之间p { color: red; } 111111 效果就是111111变红 选择了所有名为p的标签 2.类选择器（class） .red { color: red; } 1111 2222 效果只有1111变红 2222不变 开头用.后面名字自定义 调用用class id选择器 只能使用一次 一般配合JS 无需调用 一般用于唯一性元素 以＃定义 #red { color: red; } 1 4.通配符选择器 “选择所有标签” *{ color: red; } font-family 字体 英文中文都可以 font-size 单位px font-weight 字体粗细 bold加粗 建议直接用数字 font-weight 700;这种格式 font-style 字体风格 normal正常 italic斜体 color 可以用单词 可以用rgb 可以用十六进制 ＃91bef0 text-align left左 right右 center居中 给a href加none可以去掉链接的下划线 text-indent 首行缩进：只需要选择段落然后text-indent 2em 相对缩进两个文字 也可以用px line-height 行间距 包含上下间距加起来 可以用测量工具测px（上一行最下沿量到下一行最下沿） 理论上可以写在任何位置 但是一般写在head里面 称为嵌入式 行内表则是 ![image](https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/5a0ca87a-39c8-46f2-8f05-6551fd1cfc19/Screenshot_2024-10-12-19-14-34-606_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X%2F20250114%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=0a260936ea13426294691b4280ff03626b276f63f47215bff6a3c721b5e8c4d1&X-Amz-SignedHeaders=host&x-id=GetObject) 写在单行里 # 外部样式表 建立.css文件 放到html里面 以建立css和html的链接 ![image](https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/c1a61077-cd60-4362-a7b0-ee525af8909e/Screenshot_2024-10-12-19-45-22-149_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X%2F20250114%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=06ed99edddfb91be2abdf2f2ad4392c4d76f414d9a8362a314bf9554b3916acc&X-Amz-SignedHeaders=host&x-id=GetObject) ## Emmet语法 ![image](https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/5933256f-9612-4f81-8ddb-a038b0e80d5d/Screenshot_2024-10-12-19-50-39-323_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X%2F20250114%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=88d98e6ad8649873898ee8699cf2f2b2a65269b762ea145fdb8e8c2538ee6edf&X-Amz-SignedHeaders=host&x-id=GetObject) 写css只需写每个单词首字母＋内容 w100→width: 100; tdnone→text－decoration: none; ![image](https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/7302d59e-05d8-4284-a927-ca0e01c51811/Screenshot_2024-10-12-20-11-25-046_tv.danmaku.bili-edit.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X%2F20250114%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=d057601f7dcda9f5cab193cb63cb7370b56565b15254ba77594ceedcdaf0b6b3&X-Amz-SignedHeaders=host&x-id=GetObject) 后代选择器 即 元素父 元素子 ｛样式声明｝ 元素也可以用类选择器 且可以选择无数代 * 与子选择器区分 * 子选择器 .nav > li 只会选择最近一代 ![image](https://prod-files-secure.s3.us-west-2.amazonaws.com/ae2b6fd8-8637-423c-a6b9-74c87723e19b/25b6efe1-1dbd-4158-8c9f-f40ef85f347e/Screenshot_2024-10-12-20-30-58-599_tv.danmaku.bili.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45FSPPWI6X%2F20250114%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250114T035957Z&X-Amz-Expires=3600&X-Amz-Signature=b9e5d85cdb7addae591b35a086bfea69539ec969db8aa934382e3e0596afac30&X-Amz-SignedHeaders=host&x-id=GetObject) 并集选择器 div,p{ } 标签之间英文逗号分隔开、 链接文字#333黑 **块元素** * 块元素独占一行 * 高度宽度外边距内边距可控 * 宽度默认是父级宽度 * 是一个容器，盒子，里面可以放行内和块元素 **行内元素（内联元素）** * 相邻行内元素在一行上 一行可以显示多个 * 高度宽度直接设置是无效的 * 默认宽度是本身内容的宽度 * 行内元素只能容纳文本/其他行内元素 行内块元素 * 外部引入js： 双标签 里面不能再写内容 * // 单行注释 * /* 多行注释 多行注释 */ var 声明变量 声明多个变量 **JS的变量数据类型是在程序运行过程中根据等号右边的值确定的 isNaN()判断 是数字返回false 不是数字返回true console.log(isNaN(12));返回false 转义符 与C语言相同 获取字符串长度 xx.length 字符串可以用+拼接 ‘舞萌‘+’DX’输出舞萌DX * 数值+字符串=字符串 alert(’11’ + 12) // 1112 * 数值+数值=数值和 alert(11+22) // 33 true和false在加法运算之中分别是1和0 undefined是未定义 null是空 prompt取到的值是字符型String 1是变量.toString() 2是String() S必须大写 3（隐式转换）利用+拼接字符串num + ‘ ‘哪怕拼接一个空字符结果也变成字符串 parseInt取整变成数字型 （隐式转换）-0 * /都可以 * 前置自增 ＋＋num 返回自增值 * 后置自增 先返回原值再自增 除了0其他数字都返回真 if判断 如果（条件表达式）结果为真 执行大括号的内容 假则不执行 表达式符合value就执行 * 后面加default 如果都不符合就使用default后面语句 continue 跳出当前次循环 执行下一次循环 break 跳出循环 数组名.length 统计数组长度 出来的是个数 return后面的代码不会被执行 return 只能返回一个值 如果给他多个值用逗号隔开 会返回靠后的那一个 *但是可以把结果放到数组里面 arguments作为伪数组 *具有数组的length属性 *按照索引方式存储 *没有真数组的一些方法比如push 找作用域的时候可以从目标反向查找一层一层的查找 预解析 js引擎会把js 里面所有的 var 还有 function 提升到当前作用域的最前面 构造函数不需要return也可以返回结果 遍历对象用for in ，里面的变量k不需要单独赋值可以直接用 随机整数：（最小值，最大值）闭区间 Date 月份+1 周一返回1 周日返回0 VUE是用于构建用户页面的渐进式框架 用this代替当前const变量名 指向当前实例 参数位置补形参 v-for=”(item,index) in list” list=[’1’,’2’,’3’] 循环item的话会出来123 index会出来下标（012) 不写index可以省略 可以item in list 发送初始化渲染请求：创建阶段 操作DOM：挂载阶段 生命周期钩子 操作dom在mounted阶段后 watch(newValue,oldValue){ } ↑保留两位小数 scoped 全局改局部组件 父传子 子改父 删除：filter自己id 保留其他的id 先监听得到id 子传父上传id filter过滤id 本地持久化：watch深度监听 名称.setItem(key,value)把value值存入key JSON.stringify()转化为JSON字符串 在需要显示的（列表）位置用getItem拿出来 用JSON.parse()重转换为原始格式 e 事件默认参数 v-model仅在父组件中使用 子组件不能用 v-model ⇒ :value+@input value接收value绑定父组件vmodel 必须触发input(this.$emit(’input’,xxxx) :visible.sync ⇒ :visible+@update:visible 子组件this.$emit(’update:visible’,false)父组件:visible.sync=”isShow”把false通过sync传给父isshow 值确实不是value了（不是表单了）可以用,sync平常可以直接v-model **ref和$refs 第一步：给目标标签加上ref"},{"title":"PTA题","path":"/posts/PTA题.html","content":"斐波那契数列 12345678910111213def feibo(n): fib = [1,1] if n&lt;=0: return [] if n==1: return [1] while len(fib)&lt;n: fib.append(fib[-1]+fib[-2]) return fibn=int(input())result=feibo(n)print(result) 2025.1.9-1.13 抱歉给您带来了困惑。让我详细解释一下 return -1, comparisons 的作用，以及为什么它不会在每次调用时都返回 -1。 1. 理解 **return -1, comparisons** 的逻辑在您的二分查找函数 bisect_left_count 中，return -1, comparisons 这一行 仅在以下情况下执行： 目标值 **x** 不存在于数组 **a** 中。 **整个搜索过程完成，但未找到 ****x**。这意味着，如果目标值 x 存在于数组 a 中，函数会在找到 x 时立即通过 return mid, comparisons 返回相应的下标和比较次数，而不会执行 return -1, comparisons。 2. 函数执行流程让我们一步一步分析函数的执行流程： 12345678910111213141516def bisect_left_count(a, x, lo=0, hi=None): if hi is None: hi = len(a)-1 # -1代表包含上界 comparisons = 0 while lo &lt;= hi: mid = (lo + hi) // 2 comparisons += 1 if a[mid] == x: return mid, comparisons # 找到x，立即返回 elif a[mid] &lt; x: lo = mid + 1 else: hi = mid - 1 return -1, comparisons # 未找到x，返回-1 初始化： lo：搜索范围的下界，初始为 0。 hi：搜索范围的上界，初始为 len(a) - 1（包含上界）。 循环条件： 当 lo &lt;= hi 时，继续搜索。 计算中间位置 mid = (lo + hi) // 2。 比较： **如果 ****a[mid] == x**： 找到了目标值，返回当前下标 mid 和比较次数 comparisons。 **如果 ****a[mid] &lt; x**： 目标值在右半部分，更新下界 lo = mid + 1。 否则： 目标值在左半部分，更新上界 hi = mid - 1。 未找到： 如果循环结束后仍未找到 x，返回 1 和总比较次数 comparisons。 3. 示例分析让我们通过具体的示例来理解函数的行为。 示例 1：目标值存在输入： text123441 2 3 41 执行步骤： 第一次比较： lo = 0, hi = 3 mid = (0 + 3) // 2 = 1 a[1] = 2 比较 2 == 1 → 否 比较 2 &lt; 1 → 否 更新 hi = 0 比较次数：1 第二次比较： lo = 0, hi = 0 mid = (0 + 0) // 2 = 0 a[0] = 1 比较 1 == 1 → 是 返回 0 和比较次数 2输出： text12302 示例 2：目标值不存在输入： text123441 2 3 45 执行步骤： 第一次比较： lo = 0, hi = 3 mid = 1 a[1] = 2 比较 2 == 5 → 否 比较 2 &lt; 5 → 是 更新 lo = 2 比较次数：1 第二次比较： lo = 2, hi = 3 mid = 2 a[2] = 3 比较 3 == 5 → 否 比较 3 &lt; 5 → 是 更新 lo = 3 比较次数：2 第三次比较： lo = 3, hi = 3 mid = 3 a[3] = 4 比较 4 == 5 → 否 比较 4 &lt; 5 → 是 更新 lo = 4 比较次数：3 循环结束： lo = 4, hi = 3，满足 lo &gt; hi，退出循环。 返回 1 和 3输出： text123-13 4. 常见问题排查如果您发现函数 **总是返回 ****-1**，请检查以下几点： 输入是否正确： 确保输入的数组确实包含目标值。 确保数组是非降序排列的。 拼写错误： 确保在 else 分支中使用 hi = mid - 1，而不是 hi = mid1 - 1。 确保所有变量名正确，无拼写错误。 数据类型： 确保输入的 n、数组元素和 x 都是整数。 数组长度： 确保数组的长度与输入的 n 值一致。 5. 添加调试信息为了更好地理解函数的执行过程，您可以在函数中添加调试打印信息。例如： 123456789101112131415161718192021222324def bisect_left_count(a, x, lo=0, hi=None): if hi is None: hi = len(a)-1 # -1代表包含上界 comparisons = 0 while lo &lt;= hi: mid = (lo + hi) // 2 comparisons +=1 print(f&quot;Comparing x=&#123;x&#125; with a[&#123;mid&#125;]=&#123;a[mid]&#125;&quot;) # 调试信息 if a[mid] == x: return mid, comparisons elif a[mid] &lt; x: lo = mid + 1 else: hi = mid - 1 return -1, comparisonsn = int(input())a = list(map(int, input().split()))x = int(input())result, comps = bisect_left_count(a, x, hi=n-1)print(result)print(comps) 示例运行： 输入： text123441 2 3 41 输出： text12345Comparing x=1 with a[1]=2Comparing x=1 with a[0]=102 解释： 第一次比较：a[1] = 2 不等于 1，更新 hi = 0。 第二次比较：a[0] = 1 等于 1，返回下标 0 和比较次数 2。 6. 完整修正后的代码以下是完整的、经过修正并包含调试信息的代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243def bisect_left_count(a, x, lo=0, hi=None): if hi is None: hi = len(a)-1 # -1代表包含上界 comparisons = 0 while lo &lt;= hi: mid = (lo + hi) // 2 comparisons +=1 print(f&quot;Comparing x=&#123;x&#125; with a[&#123;mid&#125;]=&#123;a[mid]&#125;&quot;) # 调试信息 if a[mid] == x: return mid, comparisons elif a[mid] &lt; x: lo = mid + 1 else: hi = mid - 1 return -1, comparisonsdef main(): try: n = int(input()) if not (1 &lt;= n &lt;= 1000): raise ValueError(&quot;n值必须在1到1000之间。&quot;) a = list(map(int, input().split())) if len(a) != n: raise ValueError(&quot;数组的长度与n值不匹配。&quot;) # 检查数组是否为非降序排列 if any(a[i] &gt; a[i+1] for i in range(n-1)): raise ValueError(&quot;数组必须按非降序排列。&quot;) x = int(input()) result, comps = bisect_left_count(a, x, hi=n-1) print(result) print(comps) except Exception as e: print(f&quot;输入错误: &#123;e&#125;&quot;)if __name__ == &quot;__main__&quot;: main() 7. 进一步建议 移除调试信息：在确认代码正确后，可以移除 print(f&quot;Comparing x=&#123;x&#125; with a[&#123;mid&#125;]=&#123;a[mid]&#125;&quot;) 这一行，以保持输出的清洁。 输入验证：确保输入符合题目要求，数组按非降序排列，且 n 的值在 [1, 1000] 之间。 测试不同案例：尝试不同的输入案例，既包括目标值存在的情况，也包括不存在的情况，以确保函数在各种情况下都能正常工作。 8. 完整示例运行案例 1：目标值存在输入： text123441 2 3 41 输出： text12345Comparing x=1 with a[1]=2Comparing x=1 with a[0]=102 案例 2：目标值不存在输入： text123441 2 3 45 输出： text123456Comparing x=5 with a[1]=2Comparing x=5 with a[2]=3Comparing x=5 with a[3]=4-13 总结 **return -1, comparisons**** 的含义**：仅在目标值 x 不存在于数组 a 中时返回 1 和比较次数。 提前返回：如果找到 x，函数会立即返回对应的下标和比较次数，不会执行 return -1, comparisons。 调试与验证：通过添加调试信息，您可以清楚地看到每一步的比较过程，帮助您理解函数的执行流程并排查问题。如果您按照上述说明检查并运行代码，应该能够正确地执行二分查找并获得预期的结果。如果仍然遇到问题，请确保输入格式正确，并尝试使用调试信息来进一步分析问题所在。"},{"title":"Hello World！","path":"//posts/1.html","content":"在Stellar主题下的第一篇博客。","tags":["日常"],"categories":["杂谈"]},{"title":"友链","path":"/about/index.html","content":"我的小伙伴们 xaoxuu宇宙尽头的餐馆子书承宇panoshu小冰博客Pdone's Blog星野鈴美sumorioReqwey's BlogW4J1e's blog幼稚园园长大涛子客栈SkyReevesFelix Chen钟意博客鳄鱼的博客BeaCox超凡’s BlogshixiaocaiaRay’s Blog一蓑烟雨的博客CAYZLHweijiajinCubik的小站MerryJingleMicDZ's blog星日语Colsrch杜老师说枋柚梓MHuiGChrAlpha 的幻想乡ITBOB’S BLOGDearXuanYanliang尼采般地抒情是非题频率Wrg1t's BlogHERMITLEEJing BlogCyChan811CRainyDayYuGao's Blog进击的野草suzhigao66qinxsShan San 如何交换友链？ 您的网站应满足以下全部条件： 安全合规：合法的、非营利性、无木马植入的 HTTPS 站点。 非空壳网站：网站内发布至少 五篇 原创文章，内容题材不限。 我们需要有一定的有效互动： 先友后链：与 我 有至少 半年 的有效互动"},{"title":"工具库","path":"/explore/sites/工具库.html","content":"前端工具库 图片背景消除https://www.remove.bg/zh/图片压缩https://tinypng.com/"},{"title":"牛客零基础入门前端","path":"/wiki/niuke/牛客零基础入门前端.html","content":"01 HTMLFED1 表单类型描述请依次写出以下类型的输入框。 类型为密码，默认值为 “nowcoder” 类型为复选框，且状态为已勾选 我的解答1234&lt;form&gt; &lt;input type=&quot;password&quot; value=&quot;nowcoder&quot; /&gt; &lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot; /&gt;&lt;/form&gt; 注意点： 类型为复选框，input 属性的 checked &#x3D; “checked” FED2 表格结构描述请写出具有表格标题为 “nowcoder” 的 2 行 3 列表格结构。 我的解答1234567891011121314151617&lt;table&gt; &lt;caption&gt; nowcoder &lt;/caption&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; mdn 示例 Council budget (in £) 2018 Items Expenditure Donuts 3,000 Stationery 18,000 Totals 21,000 FED3 图像标签属性描述请写出具有标题属性和代替文本属性的图片标签。 我的解答1&lt;img src=&quot;&quot; alt=&quot;&quot; title=&quot;&quot; /&gt; FED4 新窗口打开文档描述请写出可以在新窗口打开文档的 a 标签。 我的解答1&lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt; 注意点target 规定在何处打开目标 URL。仅在 href 属性存在时使用 _blank：新窗口打开。 _parent：在父窗口中打开链接。 _self：默认，当前页面跳转。 _top：在当前窗体打开链接，并替换当前的整个窗体(框架页)。 FED5 自定义列表描述请写出列表项为 “nowcoder” 且列表项内容也为 “nowcoder” 的自定义列表。 我的解答1234&lt;dl&gt; &lt;dt&gt;nowcoder&lt;/dt&gt; &lt;dd&gt;nowcoder&lt;/dd&gt;&lt;/dl&gt; 注意点 html5 前用得多，普通列表标签，既不是 ul，也不是 ol FED6 语义化标签描述请使用语义化标签创建头部标签且包含导航标签。注意：只需在 html 模块填写标签结构，有且仅有一个头部标签和一个导航标签。 我的解答123&lt;header&gt; &lt;nav&gt;&lt;/nav&gt;&lt;/header&gt; 注意点 就普通嵌套，看报错才知道标签名 FED7 音频媒体标签属性描述请写出具有控件功能的音频媒体标签。 我的解答1&lt;audio src=&quot;&quot; controls&gt;&lt;/audio&gt; 注意点 controls：如果声明了该属性，浏览器将提供一个包含声音，播放进度，播放暂停的控制面板，让用户可以控制音频的播放。 FED8 视频媒体标签属性描述请写出具有当视频的媒体数据加载期间发生错误时执行某个方法事件的视频媒体标签。 我的解答1&lt;video src=&quot;&quot; onerror=&quot;fn()&quot; controls&gt;&lt;/video&gt;&lt;audio src=&quot;&quot; controls&gt;&lt;/audio&gt; 注意点 controls：如果存在该属性，浏览器会在视频底部提供一个控制面板，允许用户控制视频的播放，包括音量、拖动进度、暂停或恢复播放。 02 CSSFED9 CSS 选择器——标签、类、ID 选择器描述请将 html 模块中字体内容是 “红色” 的字体颜色设置为 “rgb(255, 0, 0)”，”绿色” 设置为 “rgb(0, 128, 0)”，”黑色” 设置为 “rgb(0, 0, 0)”，且字体大小都为 20px。 我的解答1234567891011121314&lt;style&gt; .green &#123; color: rgb(0, 128, 0); font-size: 20px; &#125; #black &#123; color: rgb(0, 0, 0); font-size: 20px; &#125;&lt;/style&gt;&lt;div style=&quot;color:rgb(255, 0, 0);font-size:20px&quot;&gt;红色&lt;/div&gt;&lt;div class=&quot;green&quot;&gt;绿色&lt;/div&gt;&lt;div id=&quot;black&quot;&gt;黑色&lt;/div&gt; 注意点 类选择器：. id 选择器：# FED10 CSS 选择器——伪类选择器描述请将 html 模块中 ul 列表的第 2 个 li 标签和第 4 个 li 标签的背景颜色设置成 “rgb(255, 0, 0)”。 我的解答1234567891011&lt;style&gt; li:nth-child(2n) &#123; background-color: rgb(255, 0, 0); &#125;&lt;/style&gt;&lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt;&lt;/ul&gt; 注意点 伪类选择器 nth-child(2n)：偶数个 nth-child(2n-1)：奇数个 FED11 CSS 选择器——伪元素描述请给 html 模块的 div 元素加一个后伪元素，且后伪元素的宽度和高度都是 20px，背景颜色为 “rgb(255, 0, 0)”。 我的解答12345678910&lt;style&gt; div::after &#123; content: &quot;&quot;; height: 20px; width: 20px; background-color: rgb(255, 0, 0); display: inline-block; &#125;&lt;/style&gt;&lt;div&gt;&lt;/div&gt; 注意点 ::after 会创建一个 伪元素，作为所选元素的最后一个子元素 包含 content，可以表示文字，图片等 display: inline-block; 要设置为块级元素才能给其设置宽高 FED12 按要求写一个圆描述请将 html 模块的 div 元素设置为一个半径是 50px 的圆，且边框为 1px 的黑色实线。要求： 圆角属性仅设置一个值 圆角属性单位请使用 px 注意：由于圆角属性设置广泛且都可以实现题目效果，所以请按照要求规范书写。 我的解答123456789&lt;style&gt; div &#123; width: 100px; height: 100px; border-radius: 50px; border: 1px solid black; &#125;&lt;/style&gt;&lt;div&gt;&lt;/div&gt; 注意点 border-radius 设置为 50%就是一个圆 FED13 设置盒子宽高描述请将 html 模块类为 “box” 的 div 元素宽度和高度都设置为 100px，且内间距为 20px、外间距为 10px。 我的解答123456789&lt;style&gt; .box &#123; width: 100px; height: 100px; padding: 20px; margin: 10px; &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt; 注意点 padding 内边距，margin 外边距 FED14 浮动和清除浮动描述请将类为 “left” 的 div 元素和类为 “right” 的 div 元素在同一行上向左浮动，且清除类为 “wrap” 的父级 div 元素内部的浮动。 我的解答123456789101112131415161718192021222324&lt;style&gt; .wrap::after &#123; content: &quot;&quot;; display: block; clear: both; &#125; .left &#123; width: 100px; height: 100px; background-color: red; float: left; &#125; .right &#123; width: 100px; height: 100px; background-color: yellow; float: left; &#125;&lt;/style&gt;&lt;div class=&quot;wrap&quot;&gt; &lt;div class=&quot;left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt; 注意点 float 属性左右占位，上下不占位，所以下面的元素会浮动上来，所以可以在父类盒子加一个:: after 伪类元素，设置 clear:both 闭合父盒子的边界以达到清除浮动的目的。 css - 清除浮动（clearfix）的常见方法 - front-end development - SegmentFault 思否 FED15 段落标识描述请将下面这句话以段落的形式展示在浏览器中——“牛客网是一个专注于程序员的学习和成长的专业平台。” 我的解答1&lt;p&gt;牛客网是一个专注于程序员的学习和成长的专业平台。&lt;/p&gt; 注意点 考察 p 标签的使用方法 FED16 圣诞树描述圣诞节来啦！请用 CSS 给你的朋友们制作一颗圣诞树吧~这颗圣诞树描述起来是这样的： “topbranch”是圣诞树的上枝叶，该上枝叶仅通过边框属性、左浮动、左外边距即可实现。边框的属性依次是：宽度为 100px、是直线、颜色为 green（未显示的边框颜色都为透明） “middleBranch”是圣诞树的中枝叶，该上枝叶仅通过边框属性即可实现。边框的属性依次是：宽度为 200px、是直线、颜色为 green（未显示的边框颜色都为透明） “base”是圣诞树的树干，该树干仅通过左外边距实现居中于中枝叶。树干的宽度、高度分别为 70px、200px，颜色为 gray。 注意： 上枝叶、树干的居中都是通过左外边距实现的 没有显示的边框，其属性都是透明（属性） 仅通过 border 属性完成边框的所有属性设置 我的解答12345678910111213141516171819202122232425262728293031323334&lt;style&gt; .topbranch &#123; width: 0px; height: 0px; border-width: 100px; border-color: green; border-left-color: transparent; border-right-color: transparent; border-top-color: transparent; border-style: solid; float: left; margin-left: 100px; &#125; .middleBranch &#123; width: 0px; height: 0px; border-width: 200px; border-color: green; border-left-color: transparent; border-right-color: transparent; border-top-color: transparent; border-style: solid; &#125; .base &#123; width: 70px; height: 200px; background-color: grey; margin-left: 165px; &#125;&lt;/style&gt;&lt;section class=&quot;topbranch&quot;&gt;&lt;/section&gt;&lt;section class=&quot;middleBranch&quot;&gt;&lt;/section&gt;&lt;section class=&quot;base&quot;&gt;&lt;/section&gt; 注意点 1234border-color: green;border-left-color: transparent;border-right-color: transparent;border-top-color: transparent; 这样做会显示出三角形，把其他边颜色设置为 transparent 透明 FED17 固定定位描述请将 html 模块类为”box”的 div 元素固定在视口的左上角。 我的解答12345678&lt;style&gt; .box &#123; position: fixed; top: 0; left: 0; &#125;&lt;/style&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt; 注意点 position: fixed;可以让元素在浏览器某一个位置固定，不随滚动条而移动 FED18 CSS 单位（一）描述请将 html 模块中类为”box”的 div 元素的宽度和高度设置为自身字体大小的 4 倍。 我的解答1234567&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;style&gt; .box &#123; width: 4em; height: 4em; &#125;&lt;/style&gt; 注意点 em 指的相对父级的字体大小 FED19 CSS 单位（二）描述请将 html 模块 div 元素的宽度和高度设置为 html 根元素字体大小的 4 倍。注意：只需在 css 模块补全样式内容，请勿修改 html 模块。 我的解答1234567&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;style&gt; .box &#123; width: 4rem; height: 4rem; &#125;&lt;/style&gt; 注意点 rem 指的相对根级的字体大小(:root&#x2F;html) 03 JAVASCRIPTFED20 基本数据类型检测描述请补全 JavaScript 函数，要求以字符串的形式返回参数的类型。注意：只需检测基本数据类型。 我的解答12345&lt;script&gt; function _typeof(value) &#123; return typeof value; &#125;&lt;/script&gt; 注意点 typeof 可以返回数据类型 FED21 检测复杂数据类型描述请补全 JavaScript 函数，要求以 Boolean 的形式返回第一个参数是否属于第二个参数对象的实例。 我的解答12345&lt;script&gt; function _instanceof(left, right) &#123; return left instanceof right; &#125;&lt;/script&gt; 注意点 instanceof 可以检验参数是否为某个对象的实例 FED22 数据类型转换描述请补全 JavaScript 函数，要求以字符串的形式返回两个数字参数的拼接结果。示例： _splice(223,233) -&gt; “223233” _splice(-223,-233) -&gt; “-223-233” 我的解答123456&lt;script type=&quot;text/javascript&quot;&gt; // 填写JavaScript function _splice(left, right) &#123; return left.toString() + right.toString(); &#125;&lt;/script&gt; 注意点 使用toString把数字类型转为字符串类型，再相加 FED23 阶乘描述请补全 JavaScript 函数，要求返回数字参数的阶乘。注意：参数为大于等于 0 的整数。 我的解答1234567&lt;script type=&quot;text/javascript&quot;&gt; function _factorial(number) &#123; if (number &lt; 0) return; if (number == 1 || number == 0) return 1; return number * _factorial(number - 1); &#125;&lt;/script&gt; 注意点 使用递归完成阶乘更加简洁"},{"title":"探索者笔记","path":"/explore/notes/探索者笔记.html","content":"memos 说说 本页面数据来源于：memos"},{"path":"/static/js/snow.js","content":"const message = { toast: (msg, duration) => { const d = Number(isNaN(duration) ? 2000 : duration); var el = document.createElement('div'); el.classList.add('toast'); el.classList.add('show'); el.innerHTML = msg; document.body.appendChild(el); setTimeout(function () { document.body.removeChild(el) }, d); }, } const Config = { snow: ['❄️', '☃️', '❄', '※', '❅', '❆', '❈', '❉', '❊', '❋'], color: '#d9e2e7', speed: 10, dom: document.getElementsByTagName('body')[0], interval: 800, active: false }; // 从 localStorage 获取雪花模式状态 const storedSnowActive = localStorage.getItem('snowActive'); Config.active = storedSnowActive === 'true'; // 确保 DOM 元素存在 if (!Config.dom) { throw Error('请获取存在的DOM'); } const $canvas = document.createElement('div'); function useStyle(dom, style) { for (let sKey in style) { dom.style[sKey] = style[sKey]; } } useStyle($canvas, { width: '100%', height: '100%', position: 'fixed', top: 0, left: 0, pointerEvents: 'none', zIndex: 100 }); const matchDarkMode = window.matchMedia('(prefers-color-scheme: dark)'); function handleColorSchemeChange(e) { Config.color = e.matches ? 'rgb(255, 255, 255)' : 'rgb(149, 141, 186)'; } matchDarkMode.addEventListener('change', handleColorSchemeChange); handleColorSchemeChange(matchDarkMode); let snowInterval; function startSnowInterval() { return setInterval(() => { const $snow = document.createElement('div'); $snow.innerText = Config.snow[Math.floor(Math.random() * Config.snow.length)]; useStyle($snow, { display: 'inline-block', color: Config.color, fontSize: Math.floor(Math.random() * (25 - 14 + 1) + 14) + 'px', position: 'absolute', top: 0, left: Math.floor(Math.random() * 100) + '%', transition: 'transform ' + Config.speed + 's linear,opacity ' + Config.speed + 's linear', transform: 'translateY(-100%)', opacity: Math.random() + 0.3 }); setTimeout(() => { useStyle($snow, { transform: 'translate(0, ' + window.innerHeight + 'px) rotate(480deg)', opacity: 0 }); $snow.addEventListener('transitionend', () => { $snow.remove(); }); }, 100); $canvas.appendChild($snow); }, Config.interval); } function toggleSnow() { if (Config.active) { clearInterval(snowInterval); $canvas.innerHTML = ''; Config.active = false; message.toast(\"切换到晴天模式\"); } else { snowInterval = startSnowInterval() Config.active = true; message.toast(\"切换到下雪模式\"); } localStorage.setItem('snowActive', Config.active); } // 在页面加载时应用之前的状态 if (Config.active) { snowInterval = startSnowInterval() } Config.dom.appendChild($canvas);"}]